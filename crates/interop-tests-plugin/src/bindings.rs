// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod plugin {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod peer_piper_commands {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// Tells the DHT to start providing the given key (bytes)
            pub fn start_providing(key: &[u8]) -> () {
                unsafe {
                    let vec0 = key;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:plugin/peer-piper-commands")]
                    unsafe extern "C" {
                        #[link_name = "start-providing"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Message {
                pub topic: _rt::String,
                pub peer: _rt::String,
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("topic", &self.topic)
                        .field("peer", &self.peer)
                        .field("data", &self.data)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum Error {
                /// This plugin does not support the given message data type
                UnsupportedMessageType,
                /// An error that occurred handling a message
                HandlerError(_rt::String),
                /// An input output error
                IoError(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Error::UnsupportedMessageType => {
                            f.debug_tuple("Error::UnsupportedMessageType").finish()
                        }
                        Error::HandlerError(e) => {
                            f.debug_tuple("Error::HandlerError").field(e).finish()
                        }
                        Error::IoError(e) => {
                            f.debug_tuple("Error::IoError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod peerpiper {
    pub mod pluggable {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod commands {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// ready/take -> return-values;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "peerpiper:pluggable/commands")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Publsih data to a topic
            #[derive(Clone)]
            pub struct Publish {
                /// The topic
                pub topic: _rt::String,
                /// The data
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Publish {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Publish")
                        .field("topic", &self.topic)
                        .field("data", &self.data)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct PutKeyed {
                /// The key
                pub key: _rt::Vec<u8>,
                /// The value
                pub value: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for PutKeyed {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PutKeyed")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum SystemCommand {
                /// Put bytes on the local disk
                Put(_rt::Vec<u8>),
                /// Puts Keyed bytes into the local disk
                PutKeyed(PutKeyed),
                /// Get bytes from the local disk
                Get(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for SystemCommand {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SystemCommand::Put(e) => {
                            f.debug_tuple("SystemCommand::Put").field(e).finish()
                        }
                        SystemCommand::PutKeyed(e) => {
                            f.debug_tuple("SystemCommand::PutKeyed").field(e).finish()
                        }
                        SystemCommand::Get(e) => {
                            f.debug_tuple("SystemCommand::Get").field(e).finish()
                        }
                    }
                }
            }
            /// Make a Rwquest from a Peer
            /// The request is encoded as a list of bytes
            #[derive(Clone)]
            pub struct PeerRequest {
                /// The request
                pub request: _rt::Vec<u8>,
                /// The peer id
                pub peer_id: _rt::String,
            }
            impl ::core::fmt::Debug for PeerRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PeerRequest")
                        .field("request", &self.request)
                        .field("peer-id", &self.peer_id)
                        .finish()
                }
            }
            /// Put bytes in the DHT
            #[derive(Clone)]
            pub struct PutRecord {
                /// The key
                pub key: _rt::Vec<u8>,
                /// The value
                pub value: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for PutRecord {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PutRecord")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Hash {
                /// The code
                pub code: u64,
                /// The size
                pub size: u8,
                /// The digest
                pub digest: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Hash {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Hash")
                        .field("code", &self.code)
                        .field("size", &self.size)
                        .field("digest", &self.digest)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Cid {
                /// The version
                pub version: u64,
                /// The codec
                pub codec: u64,
                /// The hash
                pub hash: Hash,
            }
            impl ::core::fmt::Debug for Cid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Cid")
                        .field("version", &self.version)
                        .field("codec", &self.codec)
                        .field("hash", &self.hash)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum AllCommands {
                /// Publish data to a topic
                Publish(Publish),
                /// Subscribe to a topic
                Subscribe(_rt::String),
                /// Unsubscribe from a topic
                Unsubscribe(_rt::String),
                /// System commands are a subset of [AllCommands] that do not go to the network, but come
                /// from componets to direct the system to do something, like save bytes to a file.
                System(SystemCommand),
                /// Please peer, do something with this data and give me a response
                PeerRequest(PeerRequest),
                /// Puts a Record on the DHT, and optionally provides the data for Pinning
                PutRecord(PutRecord),
                /// Gets a Record from the DHT
                GetRecord(_rt::Vec<u8>),
                /// Gets the Providers of a Record on the DHT
                GetProviders(_rt::Vec<u8>),
                /// Start Providing a Record on the DHT
                StartProviding(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for AllCommands {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AllCommands::Publish(e) => {
                            f.debug_tuple("AllCommands::Publish").field(e).finish()
                        }
                        AllCommands::Subscribe(e) => {
                            f.debug_tuple("AllCommands::Subscribe").field(e).finish()
                        }
                        AllCommands::Unsubscribe(e) => {
                            f.debug_tuple("AllCommands::Unsubscribe").field(e).finish()
                        }
                        AllCommands::System(e) => {
                            f.debug_tuple("AllCommands::System").field(e).finish()
                        }
                        AllCommands::PeerRequest(e) => {
                            f.debug_tuple("AllCommands::PeerRequest").field(e).finish()
                        }
                        AllCommands::PutRecord(e) => {
                            f.debug_tuple("AllCommands::PutRecord").field(e).finish()
                        }
                        AllCommands::GetRecord(e) => {
                            f.debug_tuple("AllCommands::GetRecord").field(e).finish()
                        }
                        AllCommands::GetProviders(e) => {
                            f.debug_tuple("AllCommands::GetProviders").field(e).finish()
                        }
                        AllCommands::StartProviding(e) => {
                            f.debug_tuple("AllCommands::StartProviding")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum ReturnValues {
                /// The data
                Data(_rt::Vec<u8>),
                /// The CID with version, codec and hash components
                Id(Cid),
                /// The providers
                Providers(_rt::Vec<_rt::String>),
                /// No value
                None,
            }
            impl ::core::fmt::Debug for ReturnValues {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ReturnValues::Data(e) => {
                            f.debug_tuple("ReturnValues::Data").field(e).finish()
                        }
                        ReturnValues::Id(e) => {
                            f.debug_tuple("ReturnValues::Id").field(e).finish()
                        }
                        ReturnValues::Providers(e) => {
                            f.debug_tuple("ReturnValues::Providers").field(e).finish()
                        }
                        ReturnValues::None => {
                            f.debug_tuple("ReturnValues::None").finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Order PeerPiper to do something.
            pub fn order(order: &AllCommands) -> Pollable {
                unsafe {
                    let (
                        result20_0,
                        result20_1,
                        result20_2,
                        result20_3,
                        result20_4,
                        result20_5,
                    ) = match order {
                        AllCommands::Publish(e) => {
                            let Publish { topic: topic0, data: data0 } = e;
                            let vec1 = topic0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            let vec2 = data0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (
                                0i32,
                                ptr1.cast_mut(),
                                len1 as *mut u8,
                                ptr2.cast_mut(),
                                len2 as *mut u8,
                                0usize,
                            )
                        }
                        AllCommands::Subscribe(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (
                                1i32,
                                ptr3.cast_mut(),
                                len3 as *mut u8,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        AllCommands::Unsubscribe(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (
                                2i32,
                                ptr4.cast_mut(),
                                len4 as *mut u8,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        AllCommands::System(e) => {
                            let (
                                result10_0,
                                result10_1,
                                result10_2,
                                result10_3,
                                result10_4,
                            ) = match e {
                                SystemCommand::Put(e) => {
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    (
                                        0i32,
                                        ptr5.cast_mut(),
                                        len5,
                                        ::core::ptr::null_mut(),
                                        0usize,
                                    )
                                }
                                SystemCommand::PutKeyed(e) => {
                                    let PutKeyed { key: key6, value: value6 } = e;
                                    let vec7 = key6;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    let vec8 = value6;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    (1i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                }
                                SystemCommand::Get(e) => {
                                    let vec9 = e;
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    (
                                        2i32,
                                        ptr9.cast_mut(),
                                        len9,
                                        ::core::ptr::null_mut(),
                                        0usize,
                                    )
                                }
                            };
                            (
                                3i32,
                                result10_0 as *mut u8,
                                result10_1,
                                result10_2 as *mut u8,
                                result10_3,
                                result10_4,
                            )
                        }
                        AllCommands::PeerRequest(e) => {
                            let PeerRequest { request: request11, peer_id: peer_id11 } = e;
                            let vec12 = request11;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            let vec13 = peer_id11;
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            (
                                4i32,
                                ptr12.cast_mut(),
                                len12 as *mut u8,
                                ptr13.cast_mut(),
                                len13 as *mut u8,
                                0usize,
                            )
                        }
                        AllCommands::PutRecord(e) => {
                            let PutRecord { key: key14, value: value14 } = e;
                            let vec15 = key14;
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            let vec16 = value14;
                            let ptr16 = vec16.as_ptr().cast::<u8>();
                            let len16 = vec16.len();
                            (
                                5i32,
                                ptr15.cast_mut(),
                                len15 as *mut u8,
                                ptr16.cast_mut(),
                                len16 as *mut u8,
                                0usize,
                            )
                        }
                        AllCommands::GetRecord(e) => {
                            let vec17 = e;
                            let ptr17 = vec17.as_ptr().cast::<u8>();
                            let len17 = vec17.len();
                            (
                                6i32,
                                ptr17.cast_mut(),
                                len17 as *mut u8,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        AllCommands::GetProviders(e) => {
                            let vec18 = e;
                            let ptr18 = vec18.as_ptr().cast::<u8>();
                            let len18 = vec18.len();
                            (
                                7i32,
                                ptr18.cast_mut(),
                                len18 as *mut u8,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        AllCommands::StartProviding(e) => {
                            let vec19 = e;
                            let ptr19 = vec19.as_ptr().cast::<u8>();
                            let len19 = vec19.len();
                            (
                                8i32,
                                ptr19.cast_mut(),
                                len19 as *mut u8,
                                ::core::ptr::null_mut(),
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:pluggable/commands")]
                    unsafe extern "C" {
                        #[link_name = "order"]
                        fn wit_import21(
                            _: i32,
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import21(
                        _: i32,
                        _: *mut u8,
                        _: *mut u8,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import21(
                            result20_0,
                            result20_1,
                            result20_2,
                            result20_3,
                            result20_4,
                            result20_5,
                        )
                    };
                    unsafe { Pollable::from_handle(ret as u32) }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Check if the pollable is ready
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "peerpiper:pluggable/commands")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Take the value from the pollable
                pub fn take(&self) -> ReturnValues {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 40 + 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40
                                + 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "peerpiper:pluggable/commands")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.take"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v19 = match l2 {
                            0 => {
                                let e19 = {
                                    let l3 = *ptr0.add(8).cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                ReturnValues::Data(e19)
                            }
                            1 => {
                                let e19 = {
                                    let l6 = *ptr0.add(8).cast::<i64>();
                                    let l7 = *ptr0.add(16).cast::<i64>();
                                    let l8 = *ptr0.add(24).cast::<i64>();
                                    let l9 = i32::from(*ptr0.add(32).cast::<u8>());
                                    let l10 = *ptr0
                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *ptr0
                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len12 = l11;
                                    Cid {
                                        version: l6 as u64,
                                        codec: l7 as u64,
                                        hash: Hash {
                                            code: l8 as u64,
                                            size: l9 as u8,
                                            digest: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                        },
                                    }
                                };
                                ReturnValues::Id(e19)
                            }
                            2 => {
                                let e19 = {
                                    let l13 = *ptr0.add(8).cast::<*mut u8>();
                                    let l14 = *ptr0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base18 = l13;
                                    let len18 = l14;
                                    let mut result18 = _rt::Vec::with_capacity(len18);
                                    for i in 0..len18 {
                                        let base = base18
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e18 = {
                                            let l15 = *base.add(0).cast::<*mut u8>();
                                            let l16 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                l15.cast(),
                                                len17,
                                                len17,
                                            );
                                            _rt::string_lift(bytes17)
                                        };
                                        result18.push(e18);
                                    }
                                    _rt::cabi_dealloc(
                                        base18,
                                        len18 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result18
                                };
                                ReturnValues::Providers(e19)
                            }
                            n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                ReturnValues::None
                            }
                        };
                        let result20 = v19;
                        result20
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod utils {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// log a message.
            pub fn log(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:pluggable/utils")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// get a random byte
            pub fn random_byte() -> u8 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:pluggable/utils")]
                    unsafe extern "C" {
                        #[link_name = "random-byte"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Now
            pub fn now() -> u64 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:pluggable/utils")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod plugin {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod run {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Message = super::super::super::super::component::plugin::types::Message;
                pub type Error = super::super::super::super::component::plugin::types::Error;
                /// The Component
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Plugin {
                    handle: _rt::Resource<Plugin>,
                }
                type _PluginRep<T> = Option<T>;
                impl Plugin {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Plugin`.
                    pub fn new<T: GuestPlugin>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _PluginRep<T> = Some(val);
                        let ptr: *mut _PluginRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestPlugin>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestPlugin>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestPlugin>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _PluginRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestPlugin>(&self) -> *mut _PluginRep<T> {
                        Plugin::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Plugin`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct PluginBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Plugin>,
                }
                impl<'a> PluginBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestPlugin>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _PluginRep<T> {
                        Plugin::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Plugin {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:plugin/run")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]plugin"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_plugin_cabi<T: GuestPlugin>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Plugin::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_plugin_run_tests_cabi<T: GuestPlugin>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::run_tests(
                        unsafe { PluginBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_plugin_run_tests<T: GuestPlugin>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_plugin_put_record_cabi<T: GuestPlugin>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let len1 = arg4;
                    T::put_record(
                        unsafe { PluginBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                        _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_plugin_get_record_cabi<T: GuestPlugin>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    T::get_record(
                        unsafe { PluginBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_plugin_tick_cabi<T: GuestPlugin>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::tick(
                        unsafe { PluginBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_plugin_tick<T: GuestPlugin>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base5 = l0;
                    let len5 = l1;
                    for i in 0..len5 {
                        let base = base5
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base4 = l2;
                            let len4 = l3;
                            _rt::cabi_dealloc(base4, len4 * 1, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base5,
                        len5 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_message_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let result3 = T::handle_message(super::super::super::super::component::plugin::types::Message {
                        topic: _rt::string_lift(bytes0),
                        peer: _rt::string_lift(bytes1),
                        data: _rt::Vec::from_raw_parts(arg4.cast(), len2, len2),
                    });
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::component::plugin::types::Error as V8;
                            match e {
                                V8::UnsupportedMessageType => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V8::HandlerError(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V8::IoError(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_message<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                _ => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_request_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::handle_request(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::component::plugin::types::Error as V6;
                            match e {
                                V6::UnsupportedMessageType => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V6::HandlerError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V6::IoError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_request<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l4 {
                                0 => {}
                                1 => {
                                    let l5 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                                _ => {
                                    let l7 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Plugin: GuestPlugin;
                    /// Handle a message from the world. Returns a string response or error
                    fn handle_message(msg: Message) -> Result<_rt::String, Error>;
                    /// Handles inbound requests with the given bytes
                    /// Responds with a list of bytes or an error
                    fn handle_request(data: _rt::Vec<u8>) -> Result<_rt::Vec<u8>, Error>;
                }
                pub trait GuestPlugin: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:plugin/run")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]plugin"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:plugin/run")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]plugin"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// The constructor for the component.
                    /// Initializes the state of the component.
                    /// Provides a structure to keep internal state.
                    fn new() -> Self;
                    /// Gets a Record from the DHT
                    fn run_tests(&self) -> _rt::String;
                    fn put_record(&self, key: _rt::Vec<u8>, value: _rt::Vec<u8>) -> ();
                    fn get_record(&self, key: _rt::Vec<u8>) -> ();
                    fn tick(&self) -> _rt::Vec<_rt::Vec<u8>>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_plugin_run_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:plugin/run#[constructor]plugin")] unsafe extern "C" fn
                        export_constructor_plugin() -> i32 { unsafe {
                        $($path_to_types)*:: _export_constructor_plugin_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Plugin > () } } #[unsafe
                        (export_name = "component:plugin/run#[method]plugin.run-tests")]
                        unsafe extern "C" fn export_method_plugin_run_tests(arg0 : * mut
                        u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_plugin_run_tests_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Plugin > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_component:plugin/run#[method]plugin.run-tests")]
                        unsafe extern "C" fn _post_return_method_plugin_run_tests(arg0 :
                        * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_plugin_run_tests::<<$ty as
                        $($path_to_types)*:: Guest >::Plugin > (arg0) } } #[unsafe
                        (export_name = "component:plugin/run#[method]plugin.put-record")]
                        unsafe extern "C" fn export_method_plugin_put_record(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize,) { unsafe { $($path_to_types)*::
                        _export_method_plugin_put_record_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Plugin > (arg0, arg1, arg2, arg3,
                        arg4) } } #[unsafe (export_name =
                        "component:plugin/run#[method]plugin.get-record")] unsafe extern
                        "C" fn export_method_plugin_get_record(arg0 : * mut u8, arg1 : *
                        mut u8, arg2 : usize,) { unsafe { $($path_to_types)*::
                        _export_method_plugin_get_record_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Plugin > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "component:plugin/run#[method]plugin.tick")] unsafe extern "C" fn
                        export_method_plugin_tick(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_method_plugin_tick_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Plugin > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_component:plugin/run#[method]plugin.tick")] unsafe
                        extern "C" fn _post_return_method_plugin_tick(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_plugin_tick::<<$ty as $($path_to_types)*::
                        Guest >::Plugin > (arg0) } } #[unsafe (export_name =
                        "component:plugin/run#handle-message")] unsafe extern "C" fn
                        export_handle_message(arg0 : * mut u8, arg1 : usize, arg2 : * mut
                        u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_handle_message_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name =
                        "cabi_post_component:plugin/run#handle-message")] unsafe extern
                        "C" fn _post_return_handle_message(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_handle_message::<$ty > (arg0)
                        } } #[unsafe (export_name =
                        "component:plugin/run#handle-request")] unsafe extern "C" fn
                        export_handle_request(arg0 : * mut u8, arg1 : usize,) -> * mut u8
                        { unsafe { $($path_to_types)*:: _export_handle_request_cabi::<$ty
                        > (arg0, arg1) } } #[unsafe (export_name =
                        "cabi_post_component:plugin/run#handle-request")] unsafe extern
                        "C" fn _post_return_handle_request(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_handle_request::<$ty > (arg0)
                        } } const _ : () = { #[doc(hidden)] #[unsafe (export_name =
                        "component:plugin/run#[dtor]plugin")] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Plugin::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Plugin > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_plugin_run_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_extension_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::plugin::run::__export_component_plugin_run_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::plugin::run);
    };
}
#[doc(inline)]
pub(crate) use __export_extension_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:plugin:extension-world:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1468] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb6\x0a\x01A\x02\x01\
A\x0c\x01B\x03\x01p}\x01@\x01\x03key\0\x01\0\x04\0\x0fstart-providing\x01\x01\x03\
\0$component:plugin/peer-piper-commands\x05\0\x01B\x1d\x04\0\x08pollable\x03\x01\
\x01p}\x01r\x02\x05topics\x04data\x01\x04\0\x07publish\x03\0\x02\x01r\x02\x03key\
\x01\x05value\x01\x04\0\x09put-keyed\x03\0\x04\x01q\x03\x03put\x01\x01\0\x09put-\
keyed\x01\x05\0\x03get\x01\x01\0\x04\0\x0esystem-command\x03\0\x06\x01r\x02\x07r\
equest\x01\x07peer-ids\x04\0\x0cpeer-request\x03\0\x08\x01r\x02\x03key\x01\x05va\
lue\x01\x04\0\x0aput-record\x03\0\x0a\x01r\x03\x04codew\x04size}\x06digest\x01\x04\
\0\x04hash\x03\0\x0c\x01r\x03\x07versionw\x05codecw\x04hash\x0d\x04\0\x03cid\x03\
\0\x0e\x01q\x09\x07publish\x01\x03\0\x09subscribe\x01s\0\x0bunsubscribe\x01s\0\x06\
system\x01\x07\0\x0cpeer-request\x01\x09\0\x0aput-record\x01\x0b\0\x0aget-record\
\x01\x01\0\x0dget-providers\x01\x01\0\x0fstart-providing\x01\x01\0\x04\0\x0call-\
commands\x03\0\x10\x01ps\x01q\x04\x04data\x01\x01\0\x02id\x01\x0f\0\x09providers\
\x01\x12\0\x04none\0\0\x04\0\x0dreturn-values\x03\0\x13\x01h\0\x01@\x01\x04self\x15\
\0\x7f\x04\0\x16[method]pollable.ready\x01\x16\x01@\x01\x04self\x15\0\x14\x04\0\x15\
[method]pollable.take\x01\x17\x01i\0\x01@\x01\x05order\x11\0\x18\x04\0\x05order\x01\
\x19\x03\0\x1cpeerpiper:pluggable/commands\x05\x01\x01B\x06\x01@\x01\x03msgs\x01\
\0\x04\0\x03log\x01\0\x01@\0\0}\x04\0\x0brandom-byte\x01\x01\x01@\0\0w\x04\0\x03\
now\x01\x02\x03\0\x19peerpiper:pluggable/utils\x05\x02\x01B\x05\x01p}\x01r\x03\x05\
topics\x04peers\x04data\0\x04\0\x07message\x03\0\x01\x01q\x03\x18unsupported-mes\
sage-type\0\0\x0dhandler-error\x01s\0\x08io-error\x01s\0\x04\0\x05error\x03\0\x03\
\x03\0\x16component:plugin/types\x05\x03\x02\x03\0\x03\x07message\x02\x03\0\x03\x05\
error\x01B\x19\x02\x03\x02\x01\x04\x04\0\x07message\x03\0\0\x02\x03\x02\x01\x05\x04\
\0\x05error\x03\0\x02\x04\0\x06plugin\x03\x01\x01i\x04\x01@\0\0\x05\x04\0\x13[co\
nstructor]plugin\x01\x06\x01h\x04\x01@\x01\x04self\x07\0s\x04\0\x18[method]plugi\
n.run-tests\x01\x08\x01p}\x01@\x03\x04self\x07\x03key\x09\x05value\x09\x01\0\x04\
\0\x19[method]plugin.put-record\x01\x0a\x01@\x02\x04self\x07\x03key\x09\x01\0\x04\
\0\x19[method]plugin.get-record\x01\x0b\x01p\x09\x01@\x01\x04self\x07\0\x0c\x04\0\
\x13[method]plugin.tick\x01\x0d\x01j\x01s\x01\x03\x01@\x01\x03msg\x01\0\x0e\x04\0\
\x0ehandle-message\x01\x0f\x01j\x01\x09\x01\x03\x01@\x01\x04data\x09\0\x10\x04\0\
\x0ehandle-request\x01\x11\x04\0\x14component:plugin/run\x05\x06\x04\0\x20compon\
ent:plugin/extension-world\x04\0\x0b\x15\x01\0\x0fextension-world\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
