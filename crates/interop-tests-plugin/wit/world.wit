package component:plugin;

interface types {
    record message {
        topic: string,
        peer: string,
        data: list<u8>
    }

    variant error {
        /// This plugin does not support the given message data type 
        unsupported-message-type,

        /// An error that occurred handling a message
        handler-error(string),

        /// An input output error 
        io-error(string)
    }
}

interface run {
    use types.{message, error};

    /// The Component 
    resource plugin {
      /// The constructor for the component.
      /// Initializes the state of the component. 
      /// Provides a structure to keep internal state.
      constructor();

      /// Gets a Record from the DHT 
      run-tests: func() -> string;

      put-record: func(key: list<u8>, value: list<u8>);

      get-record: func(key: list<u8>);

      tick: func() -> list<list<u8>>;
    }

    /// Handle a message from the world. Returns a string response or error
    handle-message: func(msg: message) -> result<string, error>;

    /// Handles inbound requests with the given bytes 
    /// Responds with a list of bytes or an error
    handle-request: func(data: list<u8>) -> result<list<u8>, error>;
}

interface peer-piper-commands {

    /// Tells the DHT to start providing the given key (bytes)
    start-providing: func(key: list<u8>);
}

interface host {
  /// log a message.
  log: func(msg: string);

  /// get a random byte
  random-byte: func() -> u8;

  /// Now 
  now: func() -> u64;

}

/// An example world for the component to target.
world extension-world {

    /// Import PeerPiperCommand interface
    import peer-piper-commands;

    /// Core functions
    import peerpiper:pluggable/commands;

    /// Utilities
    import peerpiper:pluggable/utils;

    /// Export the handlers for the extension
    export run;
}
