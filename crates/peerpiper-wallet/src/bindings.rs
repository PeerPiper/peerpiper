// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod delano {
  pub mod wit_ui {
    
    #[allow(clippy::all)]
    pub mod context_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The type of the app
      #[derive(Clone)]
      pub struct Page {
        pub name: wit_bindgen::rt::string::String,
        pub version: wit_bindgen::rt::string::String,
        pub description: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("name", &self.name).field("version", &self.version).field("description", &self.description).finish()
        }
      }
      #[derive(Clone)]
      pub struct Everything {
        pub page: Option<Page>,
        /// issue: option<issuer>,
        /// The base64URLsafe unpadded encoded JSON string of the loadable data (offer or proof)
        pub load: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Everything {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Everything").field("page", &self.page).field("load", &self.load).finish()
        }
      }
      #[derive(Clone, Copy)]
      pub enum Kovindex{
        Key(u32),
        Op(u32),
        Value(u32),
        Selected(u32),
      }
      impl ::core::fmt::Debug for Kovindex {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Kovindex::Key(e) => {
              f.debug_tuple("Kovindex::Key").field(e).finish()
            }
            Kovindex::Op(e) => {
              f.debug_tuple("Kovindex::Op").field(e).finish()
            }
            Kovindex::Value(e) => {
              f.debug_tuple("Kovindex::Value").field(e).finish()
            }
            Kovindex::Selected(e) => {
              f.debug_tuple("Kovindex::Selected").field(e).finish()
            }
          }
        }
      }
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Entry {
        pub idx: u32,
        pub val: Kovindex,
      }
      impl ::core::fmt::Debug for Entry {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Entry").field("idx", &self.idx).field("val", &self.val).finish()
        }
      }
      #[derive(Clone)]
      pub struct Kvctx {
        pub ctx: Entry,
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Kvctx {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Kvctx").field("ctx", &self.ctx).field("value", &self.value).finish()
        }
      }
      /// The type of context provided
      #[derive(Clone)]
      pub enum Context{
        AllContent(Everything),
        /// issuing(issuer),
        /// Adds a new attribute to an existing Entry of the Credential
        Addattribute,
        /// Adds a New Entry to the Credential
        Newentry,
        Editattribute(Kvctx),
        Editmaxentries(u8),
        /// Attempt to generate an offer
        Generateoffer,
        /// Attempt to generate a proof
        Generateproof,
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Addattribute => {
              f.debug_tuple("Context::Addattribute").finish()
            }
            Context::Newentry => {
              f.debug_tuple("Context::Newentry").finish()
            }
            Context::Editattribute(e) => {
              f.debug_tuple("Context::Editattribute").field(e).finish()
            }
            Context::Editmaxentries(e) => {
              f.debug_tuple("Context::Editmaxentries").field(e).finish()
            }
            Context::Generateoffer => {
              f.debug_tuple("Context::Generateoffer").finish()
            }
            Context::Generateproof => {
              f.debug_tuple("Context::Generateproof").finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_out {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Context = super::super::super::delano::wit_ui::context_types::Context;
      #[allow(unused_unsafe, clippy::all)]
      /// renders the initial Web component with the given data
      /// and the target template to use as top level entry point
      pub fn render(ctx: &Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          use super::super::super::delano::wit_ui::context_types::Context as V13;
          let (result14_0,result14_1,result14_2,result14_3,result14_4,result14_5,result14_6,result14_7,result14_8,result14_9,result14_10,) = match ctx {
            V13::AllContent(e) => {
              let super::super::super::delano::wit_ui::context_types::Everything{ page:page0, load:load0, } = e;
              let (result5_0,result5_1,result5_2,result5_3,result5_4,result5_5,result5_6,) = match page0 {
                Some(e) => {
                  let super::super::super::delano::wit_ui::context_types::Page{ name:name1, version:version1, description:description1, } = e;
                  let vec2 = name1;
                  let ptr2 = vec2.as_ptr() as i32;
                  let len2 = vec2.len() as i32;
                  let vec3 = version1;
                  let ptr3 = vec3.as_ptr() as i32;
                  let len3 = vec3.len() as i32;
                  let vec4 = description1;
                  let ptr4 = vec4.as_ptr() as i32;
                  let len4 = vec4.len() as i32;
                  
                  (1i32, ptr2, len2, ptr3, len3, ptr4, len4)
                },
                None => {
                  (0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                },
              };let (result7_0,result7_1,result7_2,) = match load0 {
                Some(e) => {
                  let vec6 = e;
                  let ptr6 = vec6.as_ptr() as i32;
                  let len6 = vec6.len() as i32;
                  
                  (1i32, ptr6, len6)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };
              (0i32, result5_0, result5_1, result5_2, result5_3, result5_4, result5_5, result5_6, result7_0, result7_1, result7_2)
            },
            V13::Addattribute=> {
              (1i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
            V13::Newentry=> {
              (2i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
            V13::Editattribute(e) => {
              let super::super::super::delano::wit_ui::context_types::Kvctx{ ctx:ctx8, value:value8, } = e;
              let super::super::super::delano::wit_ui::context_types::Entry{ idx:idx9, val:val9, } = ctx8;
              use super::super::super::delano::wit_ui::context_types::Kovindex as V10;
              let (result11_0,result11_1,) = match val9 {
                V10::Key(e) => (0i32, wit_bindgen::rt::as_i32(e)),
                V10::Op(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                V10::Value(e) => (2i32, wit_bindgen::rt::as_i32(e)),
                V10::Selected(e) => (3i32, wit_bindgen::rt::as_i32(e)),
              };
              let vec12 = value8;
              let ptr12 = vec12.as_ptr() as i32;
              let len12 = vec12.len() as i32;
              
              (3i32, wit_bindgen::rt::as_i32(idx9), result11_0, result11_1, ptr12, len12, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
            V13::Editmaxentries(e) => (4i32, wit_bindgen::rt::as_i32(e), 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32),
            V13::Generateoffer=> {
              (5i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
            V13::Generateproof=> {
              (6i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
          };
          let ptr15 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wit-ui/wurbo-out@0.1.0")]
          extern "C" {
            #[link_name = "render"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result14_0, result14_1, result14_2, result14_3, result14_4, result14_5, result14_6, result14_7, result14_8, result14_9, result14_10, ptr15);
          let l16 = i32::from(*((ptr15 + 0) as *const u8));
          match l16 {
            0 => {
              let e = {
                let l17 = *((ptr15 + 4) as *const i32);
                let l18 = *((ptr15 + 8) as *const i32);
                let len19 = l18 as usize;
                let bytes19 = Vec::from_raw_parts(l17 as *mut _, len19, len19);
                
                wit_bindgen::rt::string_lift(bytes19)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l20 = *((ptr15 + 4) as *const i32);
                let l21 = *((ptr15 + 8) as *const i32);
                let len22 = l21 as usize;
                let bytes22 = Vec::from_raw_parts(l20 as *mut _, len22, len22);
                
                wit_bindgen::rt::string_lift(bytes22)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// listen on all or given selectors
      pub fn activate(selectors: Option<&[wit_bindgen::rt::string::String]>,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          let (result2_0,result2_1,result2_2,) = match selectors {
            Some(e) => {
              let vec1 = e;
              let len1 = vec1.len() as i32;
              let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
              let result1 = if layout1.size() != 0
              {
                let ptr = alloc::alloc(layout1);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout1);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec1.into_iter().enumerate() {
                let base = result1 as i32 + (i as i32) * 8;
                {
                  let vec0 = e;
                  let ptr0 = vec0.as_ptr() as i32;
                  let len0 = vec0.len() as i32;
                  *((base + 4) as *mut i32) = len0;
                  *((base + 0) as *mut i32) = ptr0;
                }
              }
              cleanup_list.extend_from_slice(&[(result1, layout1),]);
              
              (1i32, result1 as i32, len1)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wit-ui/wurbo-out@0.1.0")]
          extern "C" {
            #[link_name = "activate"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result2_0, result2_1, result2_2);
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
        }
      }
      
    }
    
  }
}
pub mod peerpiper {
  pub mod wallet {
    
    #[allow(clippy::all)]
    pub mod context_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type SeedContext = super::super::super::seed_keeper::wit_ui::wurbo_out::Context;
      pub type DelanoContext = super::super::super::delano::wit_ui::wurbo_out::Context;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct App {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for App {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("App").field("title", &self.title).finish()
        }
      }
      /// Content record for the initial content of the entire app
      #[derive(Clone)]
      pub struct Content {
        /// pass in props like title, etc.
        pub app: App,
        /// optionally pass in an encrypted seed to load
        pub seed_ui: SeedContext,
        pub delano_ui: DelanoContext,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("app", &self.app).field("seed-ui", &self.seed_ui).field("delano-ui", &self.delano_ui).finish()
        }
      }
      #[derive(Clone)]
      pub struct Seed {
        /// base64 standard padded string
        pub seed: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Seed {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Seed").field("seed", &self.seed).finish()
        }
      }
      #[derive(Clone)]
      pub enum Message{
        Encrypted(Seed),
      }
      impl ::core::fmt::Debug for Message {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Message::Encrypted(e) => {
              f.debug_tuple("Message::Encrypted").field(e).finish()
            }
          }
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Seed(SeedContext),
        Delano(DelanoContext),
        /// edwards(edwards-context)
        /// Keep the event JSON as a base64 encoded string so that we don't have to parse Uint8Arrays for `jco` to receive it
        Event(Message),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Seed(e) => {
              f.debug_tuple("Context::Seed").field(e).finish()
            }
            Context::Delano(e) => {
              f.debug_tuple("Context::Delano").field(e).finish()
            }
            Context::Event(e) => {
              f.debug_tuple("Context::Event").field(e).finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_in {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type ListenDetails = super::super::super::peerpiper::wallet::context_types::ListenDetails;
      #[allow(unused_unsafe, clippy::all)]
      /// Add an event listener to the given element
      pub fn addeventlistener(details: &ListenDetails,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::peerpiper::wallet::context_types::ListenDetails{ selector:selector0, ty:ty0, } = details;
          let vec1 = selector0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = ty0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "addeventlistener"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// set the location hash
      pub fn set_hash(hash: &str,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = hash;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "set-hash"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0);
        }
      }
      
    }
    
  }
}
pub mod seed_keeper {
  pub mod wit_ui {
    
    #[allow(clippy::all)]
    pub mod wurbo_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Encrypted = wit_bindgen::rt::string::String;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct Page {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("title", &self.title).finish()
        }
      }
      #[derive(Clone)]
      pub struct Input {
        pub placeholder: wit_bindgen::rt::string::String,
        pub encrypted_seed: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Input {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Input").field("placeholder", &self.placeholder).field("encrypted-seed", &self.encrypted_seed).finish()
        }
      }
      /// Content for the entire page
      #[derive(Clone)]
      pub struct Content {
        pub page: Option<Page>,
        pub input: Option<Input>,
        pub load: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("load", &self.load).finish()
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Username(wit_bindgen::rt::string::String),
        Password(wit_bindgen::rt::string::String),
        Encrypted(Encrypted),
        Submit,
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Username(e) => {
              f.debug_tuple("Context::Username").field(e).finish()
            }
            Context::Password(e) => {
              f.debug_tuple("Context::Password").field(e).finish()
            }
            Context::Encrypted(e) => {
              f.debug_tuple("Context::Encrypted").field(e).finish()
            }
            Context::Submit => {
              f.debug_tuple("Context::Submit").finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_out {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Context = super::super::super::seed_keeper::wit_ui::wurbo_types::Context;
      #[allow(unused_unsafe, clippy::all)]
      /// renders the initial Web component with the given data
      /// and the target template to use as top level entry point
      pub fn render(ctx: &Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          use super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V14;
          let (result15_0,result15_1,result15_2,result15_3,result15_4,result15_5,result15_6,result15_7,result15_8,result15_9,result15_10,result15_11,result15_12,) = match ctx {
            V14::AllContent(e) => {
              let super::super::super::seed_keeper::wit_ui::wurbo_types::Content{ page:page0, input:input0, load:load0, } = e;
              let (result3_0,result3_1,result3_2,) = match page0 {
                Some(e) => {
                  let super::super::super::seed_keeper::wit_ui::wurbo_types::Page{ title:title1, } = e;
                  let vec2 = title1;
                  let ptr2 = vec2.as_ptr() as i32;
                  let len2 = vec2.len() as i32;
                  
                  (1i32, ptr2, len2)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };let (result8_0,result8_1,result8_2,result8_3,result8_4,result8_5,) = match input0 {
                Some(e) => {
                  let super::super::super::seed_keeper::wit_ui::wurbo_types::Input{ placeholder:placeholder4, encrypted_seed:encrypted_seed4, } = e;
                  let vec5 = placeholder4;
                  let ptr5 = vec5.as_ptr() as i32;
                  let len5 = vec5.len() as i32;
                  let (result7_0,result7_1,result7_2,) = match encrypted_seed4 {
                    Some(e) => {
                      let vec6 = e;
                      let ptr6 = vec6.as_ptr() as i32;
                      let len6 = vec6.len() as i32;
                      
                      (1i32, ptr6, len6)
                    },
                    None => {
                      (0i32, 0i32, 0i32)
                    },
                  };
                  (1i32, ptr5, len5, result7_0, result7_1, result7_2)
                },
                None => {
                  (0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                },
              };let (result10_0,result10_1,result10_2,) = match load0 {
                Some(e) => {
                  let vec9 = e;
                  let ptr9 = vec9.as_ptr() as i32;
                  let len9 = vec9.len() as i32;
                  
                  (1i32, ptr9, len9)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };
              (0i32, result3_0, result3_1, result3_2, result8_0, result8_1, result8_2, result8_3, result8_4, result8_5, result10_0, result10_1, result10_2)
            },
            V14::Username(e) => {
              let vec11 = e;
              let ptr11 = vec11.as_ptr() as i32;
              let len11 = vec11.len() as i32;
              
              (1i32, ptr11, len11, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
            V14::Password(e) => {
              let vec12 = e;
              let ptr12 = vec12.as_ptr() as i32;
              let len12 = vec12.len() as i32;
              
              (2i32, ptr12, len12, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
            V14::Encrypted(e) => {
              let vec13 = e;
              let ptr13 = vec13.as_ptr() as i32;
              let len13 = vec13.len() as i32;
              
              (3i32, ptr13, len13, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
            V14::Submit=> {
              (4i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
          };
          let ptr16 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
          extern "C" {
            #[link_name = "render"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result15_0, result15_1, result15_2, result15_3, result15_4, result15_5, result15_6, result15_7, result15_8, result15_9, result15_10, result15_11, result15_12, ptr16);
          let l17 = i32::from(*((ptr16 + 0) as *const u8));
          match l17 {
            0 => {
              let e = {
                let l18 = *((ptr16 + 4) as *const i32);
                let l19 = *((ptr16 + 8) as *const i32);
                let len20 = l19 as usize;
                let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                
                wit_bindgen::rt::string_lift(bytes20)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l21 = *((ptr16 + 4) as *const i32);
                let l22 = *((ptr16 + 8) as *const i32);
                let len23 = l22 as usize;
                let bytes23 = Vec::from_raw_parts(l21 as *mut _, len23, len23);
                
                wit_bindgen::rt::string_lift(bytes23)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// listen on all or given selectors
      pub fn activate(selectors: Option<&[wit_bindgen::rt::string::String]>,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          let (result2_0,result2_1,result2_2,) = match selectors {
            Some(e) => {
              let vec1 = e;
              let len1 = vec1.len() as i32;
              let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
              let result1 = if layout1.size() != 0
              {
                let ptr = alloc::alloc(layout1);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout1);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec1.into_iter().enumerate() {
                let base = result1 as i32 + (i as i32) * 8;
                {
                  let vec0 = e;
                  let ptr0 = vec0.as_ptr() as i32;
                  let len0 = vec0.len() as i32;
                  *((base + 4) as *mut i32) = len0;
                  *((base + 0) as *mut i32) = ptr0;
                }
              }
              cleanup_list.extend_from_slice(&[(result1, layout1),]);
              
              (1i32, result1 as i32, len1)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
          extern "C" {
            #[link_name = "activate"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result2_0, result2_1, result2_2);
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod peerpiper {
    pub mod wallet {
      
      #[allow(clippy::all)]
      pub mod wurbo_out {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Context = super::super::super::super::peerpiper::wallet::context_types::Context;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "peerpiper:wallet/wurbo-out@0.1.0#render"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_render(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let l0 = i32::from(*((arg0 + 0) as *const u8));
            use super::super::super::super::peerpiper::wallet::context_types::Context as V117;
            let v117 = match l0 {
              0 => {
                let e117 = {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  let len3 = l2 as usize;
                  let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                  let l4 = i32::from(*((arg0 + 12) as *const u8));
                  use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V30;
                  let v30 = match l4 {
                    0 => {
                      let e30 = {
                        let l5 = i32::from(*((arg0 + 16) as *const u8));
                        let l9 = i32::from(*((arg0 + 28) as *const u8));
                        let l17 = i32::from(*((arg0 + 52) as *const u8));
                        
                        super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                          page: match l5 {
                            0 => None,
                            1 => {
                              let e = {
                                let l6 = *((arg0 + 20) as *const i32);
                                let l7 = *((arg0 + 24) as *const i32);
                                let len8 = l7 as usize;
                                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                                
                                super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                                  title: wit_bindgen::rt::string_lift(bytes8),
                                }
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                          input: match l9 {
                            0 => None,
                            1 => {
                              let e = {
                                let l10 = *((arg0 + 32) as *const i32);
                                let l11 = *((arg0 + 36) as *const i32);
                                let len12 = l11 as usize;
                                let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                let l13 = i32::from(*((arg0 + 40) as *const u8));
                                
                                super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                                  placeholder: wit_bindgen::rt::string_lift(bytes12),
                                  encrypted_seed: match l13 {
                                    0 => None,
                                    1 => {
                                      let e = {
                                        let l14 = *((arg0 + 44) as *const i32);
                                        let l15 = *((arg0 + 48) as *const i32);
                                        let len16 = l15 as usize;
                                        let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                                        
                                        wit_bindgen::rt::string_lift(bytes16)
                                      };
                                      Some(e)
                                    }
                                    _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                  },
                                }
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                          load: match l17 {
                            0 => None,
                            1 => {
                              let e = {
                                let l18 = *((arg0 + 56) as *const i32);
                                let l19 = *((arg0 + 60) as *const i32);
                                let len20 = l19 as usize;
                                let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                                
                                wit_bindgen::rt::string_lift(bytes20)
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                        }
                      };
                      V30::AllContent(e30)
                    }
                    1 => {
                      let e30 = {
                        let l21 = *((arg0 + 16) as *const i32);
                        let l22 = *((arg0 + 20) as *const i32);
                        let len23 = l22 as usize;
                        let bytes23 = Vec::from_raw_parts(l21 as *mut _, len23, len23);
                        
                        wit_bindgen::rt::string_lift(bytes23)
                      };
                      V30::Username(e30)
                    }
                    2 => {
                      let e30 = {
                        let l24 = *((arg0 + 16) as *const i32);
                        let l25 = *((arg0 + 20) as *const i32);
                        let len26 = l25 as usize;
                        let bytes26 = Vec::from_raw_parts(l24 as *mut _, len26, len26);
                        
                        wit_bindgen::rt::string_lift(bytes26)
                      };
                      V30::Password(e30)
                    }
                    3 => {
                      let e30 = {
                        let l27 = *((arg0 + 16) as *const i32);
                        let l28 = *((arg0 + 20) as *const i32);
                        let len29 = l28 as usize;
                        let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                        
                        wit_bindgen::rt::string_lift(bytes29)
                      };
                      V30::Encrypted(e30)
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      V30::Submit
                    }
                  };
                  let l31 = i32::from(*((arg0 + 64) as *const u8));
                  use super::super::super::super::delano::wit_ui::context_types::Context as V57;
                  let v57 = match l31 {
                    0 => {
                      let e57 = {
                        let l32 = i32::from(*((arg0 + 68) as *const u8));
                        let l42 = i32::from(*((arg0 + 96) as *const u8));
                        
                        super::super::super::super::delano::wit_ui::context_types::Everything{
                          page: match l32 {
                            0 => None,
                            1 => {
                              let e = {
                                let l33 = *((arg0 + 72) as *const i32);
                                let l34 = *((arg0 + 76) as *const i32);
                                let len35 = l34 as usize;
                                let bytes35 = Vec::from_raw_parts(l33 as *mut _, len35, len35);
                                let l36 = *((arg0 + 80) as *const i32);
                                let l37 = *((arg0 + 84) as *const i32);
                                let len38 = l37 as usize;
                                let bytes38 = Vec::from_raw_parts(l36 as *mut _, len38, len38);
                                let l39 = *((arg0 + 88) as *const i32);
                                let l40 = *((arg0 + 92) as *const i32);
                                let len41 = l40 as usize;
                                let bytes41 = Vec::from_raw_parts(l39 as *mut _, len41, len41);
                                
                                super::super::super::super::delano::wit_ui::context_types::Page{
                                  name: wit_bindgen::rt::string_lift(bytes35),
                                  version: wit_bindgen::rt::string_lift(bytes38),
                                  description: wit_bindgen::rt::string_lift(bytes41),
                                }
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                          load: match l42 {
                            0 => None,
                            1 => {
                              let e = {
                                let l43 = *((arg0 + 100) as *const i32);
                                let l44 = *((arg0 + 104) as *const i32);
                                let len45 = l44 as usize;
                                let bytes45 = Vec::from_raw_parts(l43 as *mut _, len45, len45);
                                
                                wit_bindgen::rt::string_lift(bytes45)
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                        }
                      };
                      V57::AllContent(e57)
                    }
                    1 => {
                      V57::Addattribute
                    }
                    2 => {
                      V57::Newentry
                    }
                    3 => {
                      let e57 = {
                        let l46 = *((arg0 + 68) as *const i32);
                        let l47 = i32::from(*((arg0 + 72) as *const u8));
                        use super::super::super::super::delano::wit_ui::context_types::Kovindex as V52;
                        let v52 = match l47 {
                          0 => {
                            let e52 = {
                              let l48 = *((arg0 + 76) as *const i32);
                              
                              l48 as u32
                            };
                            V52::Key(e52)
                          }
                          1 => {
                            let e52 = {
                              let l49 = *((arg0 + 76) as *const i32);
                              
                              l49 as u32
                            };
                            V52::Op(e52)
                          }
                          2 => {
                            let e52 = {
                              let l50 = *((arg0 + 76) as *const i32);
                              
                              l50 as u32
                            };
                            V52::Value(e52)
                          }
                          n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e52 = {
                              let l51 = *((arg0 + 76) as *const i32);
                              
                              l51 as u32
                            };
                            V52::Selected(e52)
                          }
                        };
                        let l53 = *((arg0 + 80) as *const i32);
                        let l54 = *((arg0 + 84) as *const i32);
                        let len55 = l54 as usize;
                        let bytes55 = Vec::from_raw_parts(l53 as *mut _, len55, len55);
                        
                        super::super::super::super::delano::wit_ui::context_types::Kvctx{
                          ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                            idx: l46 as u32,
                            val: v52,
                          },
                          value: wit_bindgen::rt::string_lift(bytes55),
                        }
                      };
                      V57::Editattribute(e57)
                    }
                    4 => {
                      let e57 = {
                        let l56 = i32::from(*((arg0 + 68) as *const u8));
                        
                        l56 as u8
                      };
                      V57::Editmaxentries(e57)
                    }
                    5 => {
                      V57::Generateoffer
                    }
                    n => {
                      debug_assert_eq!(n, 6, "invalid enum discriminant");
                      V57::Generateproof
                    }
                  };
                  
                  super::super::super::super::peerpiper::wallet::context_types::Content{
                    app: super::super::super::super::peerpiper::wallet::context_types::App{
                      title: wit_bindgen::rt::string_lift(bytes3),
                    },
                    seed_ui: v30,
                    delano_ui: v57,
                  }
                };
                V117::AllContent(e117)
              }
              1 => {
                let e117 = {
                  let l58 = i32::from(*((arg0 + 4) as *const u8));
                  use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V84;
                  let v84 = match l58 {
                    0 => {
                      let e84 = {
                        let l59 = i32::from(*((arg0 + 8) as *const u8));
                        let l63 = i32::from(*((arg0 + 20) as *const u8));
                        let l71 = i32::from(*((arg0 + 44) as *const u8));
                        
                        super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                          page: match l59 {
                            0 => None,
                            1 => {
                              let e = {
                                let l60 = *((arg0 + 12) as *const i32);
                                let l61 = *((arg0 + 16) as *const i32);
                                let len62 = l61 as usize;
                                let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                
                                super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                                  title: wit_bindgen::rt::string_lift(bytes62),
                                }
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                          input: match l63 {
                            0 => None,
                            1 => {
                              let e = {
                                let l64 = *((arg0 + 24) as *const i32);
                                let l65 = *((arg0 + 28) as *const i32);
                                let len66 = l65 as usize;
                                let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                let l67 = i32::from(*((arg0 + 32) as *const u8));
                                
                                super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                                  placeholder: wit_bindgen::rt::string_lift(bytes66),
                                  encrypted_seed: match l67 {
                                    0 => None,
                                    1 => {
                                      let e = {
                                        let l68 = *((arg0 + 36) as *const i32);
                                        let l69 = *((arg0 + 40) as *const i32);
                                        let len70 = l69 as usize;
                                        let bytes70 = Vec::from_raw_parts(l68 as *mut _, len70, len70);
                                        
                                        wit_bindgen::rt::string_lift(bytes70)
                                      };
                                      Some(e)
                                    }
                                    _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                  },
                                }
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                          load: match l71 {
                            0 => None,
                            1 => {
                              let e = {
                                let l72 = *((arg0 + 48) as *const i32);
                                let l73 = *((arg0 + 52) as *const i32);
                                let len74 = l73 as usize;
                                let bytes74 = Vec::from_raw_parts(l72 as *mut _, len74, len74);
                                
                                wit_bindgen::rt::string_lift(bytes74)
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                        }
                      };
                      V84::AllContent(e84)
                    }
                    1 => {
                      let e84 = {
                        let l75 = *((arg0 + 8) as *const i32);
                        let l76 = *((arg0 + 12) as *const i32);
                        let len77 = l76 as usize;
                        let bytes77 = Vec::from_raw_parts(l75 as *mut _, len77, len77);
                        
                        wit_bindgen::rt::string_lift(bytes77)
                      };
                      V84::Username(e84)
                    }
                    2 => {
                      let e84 = {
                        let l78 = *((arg0 + 8) as *const i32);
                        let l79 = *((arg0 + 12) as *const i32);
                        let len80 = l79 as usize;
                        let bytes80 = Vec::from_raw_parts(l78 as *mut _, len80, len80);
                        
                        wit_bindgen::rt::string_lift(bytes80)
                      };
                      V84::Password(e84)
                    }
                    3 => {
                      let e84 = {
                        let l81 = *((arg0 + 8) as *const i32);
                        let l82 = *((arg0 + 12) as *const i32);
                        let len83 = l82 as usize;
                        let bytes83 = Vec::from_raw_parts(l81 as *mut _, len83, len83);
                        
                        wit_bindgen::rt::string_lift(bytes83)
                      };
                      V84::Encrypted(e84)
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      V84::Submit
                    }
                  };
                  
                  v84
                };
                V117::Seed(e117)
              }
              2 => {
                let e117 = {
                  let l85 = i32::from(*((arg0 + 4) as *const u8));
                  use super::super::super::super::delano::wit_ui::context_types::Context as V111;
                  let v111 = match l85 {
                    0 => {
                      let e111 = {
                        let l86 = i32::from(*((arg0 + 8) as *const u8));
                        let l96 = i32::from(*((arg0 + 36) as *const u8));
                        
                        super::super::super::super::delano::wit_ui::context_types::Everything{
                          page: match l86 {
                            0 => None,
                            1 => {
                              let e = {
                                let l87 = *((arg0 + 12) as *const i32);
                                let l88 = *((arg0 + 16) as *const i32);
                                let len89 = l88 as usize;
                                let bytes89 = Vec::from_raw_parts(l87 as *mut _, len89, len89);
                                let l90 = *((arg0 + 20) as *const i32);
                                let l91 = *((arg0 + 24) as *const i32);
                                let len92 = l91 as usize;
                                let bytes92 = Vec::from_raw_parts(l90 as *mut _, len92, len92);
                                let l93 = *((arg0 + 28) as *const i32);
                                let l94 = *((arg0 + 32) as *const i32);
                                let len95 = l94 as usize;
                                let bytes95 = Vec::from_raw_parts(l93 as *mut _, len95, len95);
                                
                                super::super::super::super::delano::wit_ui::context_types::Page{
                                  name: wit_bindgen::rt::string_lift(bytes89),
                                  version: wit_bindgen::rt::string_lift(bytes92),
                                  description: wit_bindgen::rt::string_lift(bytes95),
                                }
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                          load: match l96 {
                            0 => None,
                            1 => {
                              let e = {
                                let l97 = *((arg0 + 40) as *const i32);
                                let l98 = *((arg0 + 44) as *const i32);
                                let len99 = l98 as usize;
                                let bytes99 = Vec::from_raw_parts(l97 as *mut _, len99, len99);
                                
                                wit_bindgen::rt::string_lift(bytes99)
                              };
                              Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                          },
                        }
                      };
                      V111::AllContent(e111)
                    }
                    1 => {
                      V111::Addattribute
                    }
                    2 => {
                      V111::Newentry
                    }
                    3 => {
                      let e111 = {
                        let l100 = *((arg0 + 8) as *const i32);
                        let l101 = i32::from(*((arg0 + 12) as *const u8));
                        use super::super::super::super::delano::wit_ui::context_types::Kovindex as V106;
                        let v106 = match l101 {
                          0 => {
                            let e106 = {
                              let l102 = *((arg0 + 16) as *const i32);
                              
                              l102 as u32
                            };
                            V106::Key(e106)
                          }
                          1 => {
                            let e106 = {
                              let l103 = *((arg0 + 16) as *const i32);
                              
                              l103 as u32
                            };
                            V106::Op(e106)
                          }
                          2 => {
                            let e106 = {
                              let l104 = *((arg0 + 16) as *const i32);
                              
                              l104 as u32
                            };
                            V106::Value(e106)
                          }
                          n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e106 = {
                              let l105 = *((arg0 + 16) as *const i32);
                              
                              l105 as u32
                            };
                            V106::Selected(e106)
                          }
                        };
                        let l107 = *((arg0 + 20) as *const i32);
                        let l108 = *((arg0 + 24) as *const i32);
                        let len109 = l108 as usize;
                        let bytes109 = Vec::from_raw_parts(l107 as *mut _, len109, len109);
                        
                        super::super::super::super::delano::wit_ui::context_types::Kvctx{
                          ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                            idx: l100 as u32,
                            val: v106,
                          },
                          value: wit_bindgen::rt::string_lift(bytes109),
                        }
                      };
                      V111::Editattribute(e111)
                    }
                    4 => {
                      let e111 = {
                        let l110 = i32::from(*((arg0 + 8) as *const u8));
                        
                        l110 as u8
                      };
                      V111::Editmaxentries(e111)
                    }
                    5 => {
                      V111::Generateoffer
                    }
                    n => {
                      debug_assert_eq!(n, 6, "invalid enum discriminant");
                      V111::Generateproof
                    }
                  };
                  
                  v111
                };
                V117::Delano(e117)
              }
              n => {
                debug_assert_eq!(n, 3, "invalid enum discriminant");
                let e117 = {
                  let l112 = i32::from(*((arg0 + 4) as *const u8));
                  use super::super::super::super::peerpiper::wallet::context_types::Message as V116;
                  let v116 = match l112 {
                    n => {
                      debug_assert_eq!(n, 0, "invalid enum discriminant");
                      let e116 = {
                        let l113 = *((arg0 + 8) as *const i32);
                        let l114 = *((arg0 + 12) as *const i32);
                        let len115 = l114 as usize;
                        let bytes115 = Vec::from_raw_parts(l113 as *mut _, len115, len115);
                        
                        super::super::super::super::peerpiper::wallet::context_types::Seed{
                          seed: wit_bindgen::rt::string_lift(bytes115),
                        }
                      };
                      V116::Encrypted(e116)
                    }
                  };
                  
                  v116
                };
                V117::Event(e117)
              }
            };
            let result118 = <_GuestImpl as Guest>::render(v117);
            wit_bindgen::rt::dealloc(arg0, 108, 4);
            let ptr119 = _RET_AREA.0.as_mut_ptr() as i32;
            match result118 {
              Ok(e) => { {
                *((ptr119 + 0) as *mut u8) = (0i32) as u8;
                let vec120 = (e.into_bytes()).into_boxed_slice();
                let ptr120 = vec120.as_ptr() as i32;
                let len120 = vec120.len() as i32;
                ::core::mem::forget(vec120);
                *((ptr119 + 8) as *mut i32) = len120;
                *((ptr119 + 4) as *mut i32) = ptr120;
              } },
              Err(e) => { {
                *((ptr119 + 0) as *mut u8) = (1i32) as u8;
                let vec121 = (e.into_bytes()).into_boxed_slice();
                let ptr121 = vec121.as_ptr() as i32;
                let len121 = vec121.len() as i32;
                ::core::mem::forget(vec121);
                *((ptr119 + 8) as *mut i32) = len121;
                *((ptr119 + 4) as *mut i32) = ptr121;
              } },
            };ptr119
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_peerpiper:wallet/wurbo-out@0.1.0#render"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_render(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "peerpiper:wallet/wurbo-out@0.1.0#activate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_activate(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::activate(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let base3 = arg1;
                  let len3 = arg2;
                  let mut result3 = Vec::with_capacity(len3 as usize);
                  for i in 0..len3 {
                    let base = base3 + i * 8;
                    let e3 = {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      let len2 = l1 as usize;
                      let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                      
                      wit_bindgen::rt::string_lift(bytes2)
                    };
                    result3.push(e3);
                  }
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                  
                  result3
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// renders the initial Web component with the given data
          fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          /// activate listening
          fn activate(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
      
      #[allow(clippy::all)]
      pub mod aggregation {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "peerpiper:wallet/aggregation@0.1.0#activates"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_activates(arg0: i32,arg1: i32,arg2: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::activates(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let base3 = arg1;
                  let len3 = arg2;
                  let mut result3 = Vec::with_capacity(len3 as usize);
                  for i in 0..len3 {
                    let base = base3 + i * 8;
                    let e3 = {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      let len2 = l1 as usize;
                      let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                      
                      wit_bindgen::rt::string_lift(bytes2)
                    };
                    result3.push(e3);
                  }
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                  
                  result3
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// calls activate on on the child components
          fn activates(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:peerpiper"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6587] = [3, 0, 9, 112, 101, 101, 114, 112, 105, 112, 101, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 221, 8, 1, 65, 14, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 107, 115, 1, 114, 2, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 14, 101, 110, 99, 114, 121, 112, 116, 101, 100, 45, 115, 101, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 107, 5, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 9, 5, 105, 110, 112, 117, 116, 10, 4, 108, 111, 97, 100, 6, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 7, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 111, 102, 102, 101, 114, 0, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 112, 114, 111, 111, 102, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 16, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 114, 1, 4, 115, 101, 101, 100, 115, 4, 0, 4, 115, 101, 101, 100, 3, 0, 10, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 11, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 12, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 13, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 4, 1, 36, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 11, 19, 1, 0, 13, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 3, 0, 0, 7, 81, 1, 65, 2, 1, 66, 4, 1, 112, 115, 1, 107, 0, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 1, 1, 0, 4, 0, 9, 97, 99, 116, 105, 118, 97, 116, 101, 115, 1, 2, 4, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 64, 48, 46, 49, 46, 48, 5, 0, 11, 17, 1, 0, 11, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 3, 2, 0, 7, 235, 9, 1, 65, 17, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 107, 115, 1, 114, 2, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 14, 101, 110, 99, 114, 121, 112, 116, 101, 100, 45, 115, 101, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 107, 5, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 9, 5, 105, 110, 112, 117, 116, 10, 4, 108, 111, 97, 100, 6, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 7, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 111, 102, 102, 101, 114, 0, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 112, 114, 111, 111, 102, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 16, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 114, 1, 4, 115, 101, 101, 100, 115, 4, 0, 4, 115, 101, 101, 100, 3, 0, 10, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 11, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 12, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 13, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 36, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 6, 2, 3, 2, 1, 9, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 1, 64, 1, 4, 104, 97, 115, 104, 115, 1, 0, 4, 0, 8, 115, 101, 116, 45, 104, 97, 115, 104, 1, 3, 4, 1, 31, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 10, 11, 14, 1, 0, 8, 119, 117, 114, 98, 111, 45, 105, 110, 3, 4, 0, 7, 225, 9, 1, 65, 17, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 107, 115, 1, 114, 2, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 14, 101, 110, 99, 114, 121, 112, 116, 101, 100, 45, 115, 101, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 107, 5, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 9, 5, 105, 110, 112, 117, 116, 10, 4, 108, 111, 97, 100, 6, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 7, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 111, 102, 102, 101, 114, 0, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 112, 114, 111, 111, 102, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 16, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 114, 1, 4, 115, 101, 101, 100, 115, 4, 0, 4, 115, 101, 101, 100, 3, 0, 10, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 11, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 12, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 13, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 36, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 9, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 32, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 10, 11, 15, 1, 0, 9, 119, 117, 114, 98, 111, 45, 111, 117, 116, 3, 6, 0, 7, 225, 12, 1, 65, 2, 1, 65, 22, 1, 66, 15, 1, 115, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 0, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 2, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 4, 1, 107, 115, 1, 114, 2, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 14, 101, 110, 99, 114, 121, 112, 116, 101, 100, 45, 115, 101, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 107, 5, 1, 107, 8, 1, 114, 3, 4, 112, 97, 103, 101, 9, 5, 105, 110, 112, 117, 116, 10, 4, 108, 111, 97, 100, 6, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 11, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 12, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 1, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 16, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 107, 1, 1, 107, 115, 1, 114, 2, 4, 112, 97, 103, 101, 2, 4, 108, 111, 97, 100, 3, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 4, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 6, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 9, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 10, 1, 114, 2, 3, 99, 116, 120, 11, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 12, 1, 113, 7, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 5, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 13, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 111, 102, 102, 101, 114, 0, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 112, 114, 111, 111, 102, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 16, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 114, 1, 4, 115, 101, 101, 100, 115, 4, 0, 4, 115, 101, 101, 100, 3, 0, 10, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 11, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 12, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 13, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 14, 3, 1, 36, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 6, 2, 3, 2, 1, 9, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 1, 64, 1, 4, 104, 97, 115, 104, 115, 1, 0, 4, 0, 8, 115, 101, 116, 45, 104, 97, 115, 104, 1, 3, 3, 1, 31, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 10, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 11, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 4, 1, 32, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 12, 1, 66, 4, 1, 112, 115, 1, 107, 0, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 1, 1, 0, 4, 0, 9, 97, 99, 116, 105, 118, 97, 116, 101, 115, 1, 2, 4, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 64, 48, 46, 49, 46, 48, 5, 13, 4, 1, 32, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 112, 101, 101, 114, 112, 105, 112, 101, 114, 64, 48, 46, 49, 46, 48, 4, 0, 11, 15, 1, 0, 9, 112, 101, 101, 114, 112, 105, 112, 101, 114, 3, 8, 0, 0, 153, 8, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 116, 97, 105, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 44, 34, 97, 112, 112, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 105, 110, 105, 106, 105, 110, 106, 97, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 34, 125, 44, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 110, 116, 32, 114, 101, 99, 111, 114, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 99, 111, 110, 116, 101, 110, 116, 32, 111, 102, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 97, 112, 112, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 97, 112, 112, 34, 58, 34, 112, 97, 115, 115, 32, 105, 110, 32, 112, 114, 111, 112, 115, 32, 108, 105, 107, 101, 32, 116, 105, 116, 108, 101, 44, 32, 101, 116, 99, 46, 34, 44, 34, 115, 101, 101, 100, 45, 117, 105, 34, 58, 34, 111, 112, 116, 105, 111, 110, 97, 108, 108, 121, 32, 112, 97, 115, 115, 32, 105, 110, 32, 97, 110, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 32, 116, 111, 32, 108, 111, 97, 100, 34, 125, 125, 44, 34, 115, 101, 101, 100, 34, 58, 123, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 115, 101, 101, 100, 34, 58, 34, 98, 97, 115, 101, 54, 52, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 112, 97, 100, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 34, 125, 125, 44, 34, 99, 111, 110, 116, 101, 120, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 118, 97, 114, 105, 97, 110, 116, 115, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 101, 118, 101, 110, 116, 34, 58, 34, 101, 100, 119, 97, 114, 100, 115, 40, 101, 100, 119, 97, 114, 100, 115, 45, 99, 111, 110, 116, 101, 120, 116, 41, 92, 110, 75, 101, 101, 112, 32, 116, 104, 101, 32, 101, 118, 101, 110, 116, 32, 74, 83, 79, 78, 32, 97, 115, 32, 97, 32, 98, 97, 115, 101, 54, 52, 32, 101, 110, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 115, 111, 32, 116, 104, 97, 116, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 111, 32, 112, 97, 114, 115, 101, 32, 85, 105, 110, 116, 56, 65, 114, 114, 97, 121, 115, 32, 102, 111, 114, 32, 96, 106, 99, 111, 96, 32, 116, 111, 32, 114, 101, 99, 101, 105, 118, 101, 32, 105, 116, 34, 125, 125, 125, 125, 44, 34, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 99, 116, 105, 118, 97, 116, 101, 115, 34, 58, 34, 99, 97, 108, 108, 115, 32, 97, 99, 116, 105, 118, 97, 116, 101, 32, 111, 110, 32, 111, 110, 32, 116, 104, 101, 32, 99, 104, 105, 108, 100, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 105, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 34, 58, 34, 65, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 44, 34, 115, 101, 116, 45, 104, 97, 115, 104, 34, 58, 34, 115, 101, 116, 32, 116, 104, 101, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 104, 97, 115, 104, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 111, 117, 116, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 101, 110, 100, 101, 114, 34, 58, 34, 114, 101, 110, 100, 101, 114, 115, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 87, 101, 98, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 100, 97, 116, 97, 34, 44, 34, 97, 99, 116, 105, 118, 97, 116, 101, 34, 58, 34, 97, 99, 116, 105, 118, 97, 116, 101, 32, 108, 105, 115, 116, 101, 110, 105, 110, 103, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
