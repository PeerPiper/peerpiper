// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod delano {
    pub mod wit_ui {
        #[allow(clippy::all)]
        pub mod context_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// The type of the app
            #[derive(Clone)]
            pub struct Page {
                pub name: _rt::String,
                pub version: _rt::String,
                pub description: _rt::String,
            }
            impl ::core::fmt::Debug for Page {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Page")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("description", &self.description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Everything {
                pub page: Option<Page>,
                /// issue: option<issuer>,
                /// The base64URLsafe unpadded encoded JSON string of the loadable data (offer or proof)
                pub load: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Everything {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Everything")
                        .field("page", &self.page)
                        .field("load", &self.load)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Kovindex {
                Key(u32),
                Op(u32),
                Value(u32),
                Selected(u32),
            }
            impl ::core::fmt::Debug for Kovindex {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Kovindex::Key(e) => f.debug_tuple("Kovindex::Key").field(e).finish(),
                        Kovindex::Op(e) => f.debug_tuple("Kovindex::Op").field(e).finish(),
                        Kovindex::Value(e) => f.debug_tuple("Kovindex::Value").field(e).finish(),
                        Kovindex::Selected(e) => {
                            f.debug_tuple("Kovindex::Selected").field(e).finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Entry {
                pub idx: u32,
                pub val: Kovindex,
            }
            impl ::core::fmt::Debug for Entry {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Entry")
                        .field("idx", &self.idx)
                        .field("val", &self.val)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Kvctx {
                pub ctx: Entry,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Kvctx {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Kvctx")
                        .field("ctx", &self.ctx)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Message {
                pub peer: _rt::String,
                pub topic: _rt::String,
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("peer", &self.peer)
                        .field("topic", &self.topic)
                        .field("data", &self.data)
                        .finish()
                }
            }
            /// The type of context provided
            #[derive(Clone)]
            pub enum Context {
                AllContent(Everything),
                /// issuing(issuer),
                /// Adds a new attribute to an existing Entry of the Credential
                Addattribute,
                /// Adds a New Entry to the Credential
                Newentry,
                Editattribute(Kvctx),
                Editmaxentries(u8),
                /// Attempt to generate an offer
                Generateoffer,
                /// Attempt to generate a proof
                Generateproof,
                /// emit a publish event with the proof data
                Publishproof,
                /// Message recieved from the Network?
                Networkevent(Message),
            }
            impl ::core::fmt::Debug for Context {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Context::AllContent(e) => {
                            f.debug_tuple("Context::AllContent").field(e).finish()
                        }
                        Context::Addattribute => f.debug_tuple("Context::Addattribute").finish(),
                        Context::Newentry => f.debug_tuple("Context::Newentry").finish(),
                        Context::Editattribute(e) => {
                            f.debug_tuple("Context::Editattribute").field(e).finish()
                        }
                        Context::Editmaxentries(e) => {
                            f.debug_tuple("Context::Editmaxentries").field(e).finish()
                        }
                        Context::Generateoffer => f.debug_tuple("Context::Generateoffer").finish(),
                        Context::Generateproof => f.debug_tuple("Context::Generateproof").finish(),
                        Context::Publishproof => f.debug_tuple("Context::Publishproof").finish(),
                        Context::Networkevent(e) => {
                            f.debug_tuple("Context::Networkevent").field(e).finish()
                        }
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod wurbo_out {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Context = super::super::super::delano::wit_ui::context_types::Context;
            #[allow(unused_unsafe, clippy::all)]
            /// renders the initial Web component with the given data
            /// and the target template to use as top level entry point
            pub fn render(ctx: &Context) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::delano::wit_ui::context_types::Context as V17;
                    let (
                        result18_0,
                        result18_1,
                        result18_2,
                        result18_3,
                        result18_4,
                        result18_5,
                        result18_6,
                        result18_7,
                        result18_8,
                        result18_9,
                        result18_10,
                    ) = match ctx {
                        V17::AllContent(e) => {
                            let super::super::super::delano::wit_ui::context_types::Everything {
                                page: page0,
                                load: load0,
                            } = e;
                            let (
                                result5_0,
                                result5_1,
                                result5_2,
                                result5_3,
                                result5_4,
                                result5_5,
                                result5_6,
                            ) = match page0 {
                                Some(e) => {
                                    let super::super::super::delano::wit_ui::context_types::Page {
                                        name: name1,
                                        version: version1,
                                        description: description1,
                                    } = e;
                                    let vec2 = name1;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    let vec3 = version1;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    let vec4 = description1;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();

                                    (
                                        1i32,
                                        ptr2.cast_mut(),
                                        len2,
                                        ptr3.cast_mut(),
                                        len3,
                                        ptr4.cast_mut(),
                                        len4,
                                    )
                                }
                                None => (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                ),
                            };
                            let (result7_0, result7_1, result7_2) = match load0 {
                                Some(e) => {
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();

                                    (1i32, ptr6.cast_mut(), len6)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                0i32,
                                result5_0 as *mut u8,
                                result5_1,
                                result5_2 as *mut u8,
                                result5_3,
                                result5_4 as *mut u8,
                                result5_5,
                                result5_6,
                                result7_0,
                                result7_1,
                                result7_2,
                            )
                        }
                        V17::Addattribute => (
                            1i32,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                        V17::Newentry => (
                            2i32,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                        V17::Editattribute(e) => {
                            let super::super::super::delano::wit_ui::context_types::Kvctx {
                                ctx: ctx8,
                                value: value8,
                            } = e;
                            let super::super::super::delano::wit_ui::context_types::Entry {
                                idx: idx9,
                                val: val9,
                            } = ctx8;
                            use super::super::super::delano::wit_ui::context_types::Kovindex as V10;
                            let (result11_0, result11_1) = match val9 {
                                V10::Key(e) => (0i32, _rt::as_i32(e)),
                                V10::Op(e) => (1i32, _rt::as_i32(e)),
                                V10::Value(e) => (2i32, _rt::as_i32(e)),
                                V10::Selected(e) => (3i32, _rt::as_i32(e)),
                            };
                            let vec12 = value8;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();

                            (
                                3i32,
                                _rt::as_i32(idx9) as *mut u8,
                                result11_0 as *mut u8,
                                result11_1 as *mut u8,
                                ptr12.cast_mut(),
                                len12 as *mut u8,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        V17::Editmaxentries(e) => (
                            4i32,
                            _rt::as_i32(e) as *mut u8,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                        V17::Generateoffer => (
                            5i32,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                        V17::Generateproof => (
                            6i32,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                        V17::Publishproof => (
                            7i32,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                        V17::Networkevent(e) => {
                            let super::super::super::delano::wit_ui::context_types::Message {
                                peer: peer13,
                                topic: topic13,
                                data: data13,
                            } = e;
                            let vec14 = peer13;
                            let ptr14 = vec14.as_ptr().cast::<u8>();
                            let len14 = vec14.len();
                            let vec15 = topic13;
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            let vec16 = data13;
                            let ptr16 = vec16.as_ptr().cast::<u8>();
                            let len16 = vec16.len();

                            (
                                8i32,
                                ptr14.cast_mut(),
                                len14 as *mut u8,
                                ptr15.cast_mut(),
                                len15 as *mut u8,
                                ptr16.cast_mut(),
                                len16 as *mut u8,
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                    };
                    let ptr19 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "delano:wit-ui/wurbo-out@0.1.0")]
                    extern "C" {
                        #[link_name = "render"]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: *mut u8,
                        _: *mut u8,
                        _: *mut u8,
                        _: *mut u8,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result18_0,
                        result18_1,
                        result18_2,
                        result18_3,
                        result18_4,
                        result18_5,
                        result18_6,
                        result18_7,
                        result18_8,
                        result18_9,
                        result18_10,
                        ptr19,
                    );
                    let l20 = i32::from(*ptr19.add(0).cast::<u8>());
                    match l20 {
                        0 => {
                            let e = {
                                let l21 = *ptr19.add(4).cast::<*mut u8>();
                                let l22 = *ptr19.add(8).cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                _rt::string_lift(bytes23)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l24 = *ptr19.add(4).cast::<*mut u8>();
                                let l25 = *ptr19.add(8).cast::<usize>();
                                let len26 = l25;
                                let bytes26 = _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                _rt::string_lift(bytes26)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// listen on all or given selectors
            pub fn activate(selectors: Option<&[_rt::String]>) {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    let (result2_0, result2_1, result2_2) = match selectors {
                        Some(e) => {
                            let vec1 = e;
                            let len1 = vec1.len();
                            let layout1 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                            let result1 = if layout1.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout1);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec1.into_iter().enumerate() {
                                let base = result1.add(i * 8);
                                {
                                    let vec0 = e;
                                    let ptr0 = vec0.as_ptr().cast::<u8>();
                                    let len0 = vec0.len();
                                    *base.add(4).cast::<usize>() = len0;
                                    *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result1, layout1)]);

                            (1i32, result1, len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "delano:wit-ui/wurbo-out@0.1.0")]
                    extern "C" {
                        #[link_name = "activate"]
                        fn wit_import(_: i32, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(result2_0, result2_1, result2_2);
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                }
            }
        }
    }
}
pub mod peerpiper {
    pub mod wallet {
        #[allow(clippy::all)]
        pub mod context_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type SeedContext = super::super::super::seed_keeper::wit_ui::wurbo_out::Context;
            pub type DelanoContext = super::super::super::delano::wit_ui::wurbo_out::Context;
            /// Details required in order to add an event listener to an element
            #[derive(Clone)]
            pub struct ListenDetails {
                pub selector: _rt::String,
                pub ty: _rt::String,
            }
            impl ::core::fmt::Debug for ListenDetails {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ListenDetails")
                        .field("selector", &self.selector)
                        .field("ty", &self.ty)
                        .finish()
                }
            }
            /// Context for the minijinja rendering
            #[derive(Clone)]
            pub struct App {
                pub title: _rt::String,
            }
            impl ::core::fmt::Debug for App {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("App").field("title", &self.title).finish()
                }
            }
            /// Content record for the initial content of the entire app
            #[derive(Clone)]
            pub struct Content {
                /// pass in props like title, etc.
                pub app: App,
                /// optionally pass in an encrypted seed to load
                pub seed_ui: SeedContext,
                pub delano_ui: DelanoContext,
            }
            impl ::core::fmt::Debug for Content {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Content")
                        .field("app", &self.app)
                        .field("seed-ui", &self.seed_ui)
                        .field("delano-ui", &self.delano_ui)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Seed {
                /// base64 standard padded string
                pub seed: _rt::String,
            }
            impl ::core::fmt::Debug for Seed {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Seed").field("seed", &self.seed).finish()
                }
            }
            #[derive(Clone)]
            pub struct Message {
                pub peer: _rt::String,
                pub topic: _rt::String,
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("peer", &self.peer)
                        .field("topic", &self.topic)
                        .field("data", &self.data)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct PublishMessage {
                pub key: _rt::String,
                pub value: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for PublishMessage {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PublishMessage")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SubscribeTopic {
                pub key: _rt::String,
            }
            impl ::core::fmt::Debug for SubscribeTopic {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("SubscribeTopic")
                        .field("key", &self.key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum Events {
                Encrypted(Seed),
                Message(Message),
                Publish(PublishMessage),
                Subscribe(SubscribeTopic),
            }
            impl ::core::fmt::Debug for Events {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Events::Encrypted(e) => {
                            f.debug_tuple("Events::Encrypted").field(e).finish()
                        }
                        Events::Message(e) => f.debug_tuple("Events::Message").field(e).finish(),
                        Events::Publish(e) => f.debug_tuple("Events::Publish").field(e).finish(),
                        Events::Subscribe(e) => {
                            f.debug_tuple("Events::Subscribe").field(e).finish()
                        }
                    }
                }
            }
            /// Context variants
            #[derive(Clone)]
            pub enum Context {
                AllContent(Content),
                Seed(SeedContext),
                Delano(DelanoContext),
                /// edwards(edwards-context)
                Event(Events),
            }
            impl ::core::fmt::Debug for Context {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Context::AllContent(e) => {
                            f.debug_tuple("Context::AllContent").field(e).finish()
                        }
                        Context::Seed(e) => f.debug_tuple("Context::Seed").field(e).finish(),
                        Context::Delano(e) => f.debug_tuple("Context::Delano").field(e).finish(),
                        Context::Event(e) => f.debug_tuple("Context::Event").field(e).finish(),
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod wurbo_in {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            pub type ListenDetails =
                super::super::super::peerpiper::wallet::context_types::ListenDetails;
            #[allow(unused_unsafe, clippy::all)]
            /// Add an event listener to the given element
            pub fn addeventlistener(details: &ListenDetails) {
                unsafe {
                    let super::super::super::peerpiper::wallet::context_types::ListenDetails {
                        selector: selector0,
                        ty: ty0,
                    } = details;
                    let vec1 = selector0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = ty0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
                    extern "C" {
                        #[link_name = "addeventlistener"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr1.cast_mut(), len1, ptr2.cast_mut(), len2);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Emit events from this component. Messages should be serialized JSON strings of Event type.
            pub fn emit(message: &str) {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
                    extern "C" {
                        #[link_name = "emit"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// set the location hash
            pub fn set_hash(hash: &str) {
                unsafe {
                    let vec0 = hash;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
                    extern "C" {
                        #[link_name = "set-hash"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
        }
    }
}
pub mod seed_keeper {
    pub mod wit_ui {
        #[allow(clippy::all)]
        pub mod wurbo_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Encrypted = _rt::String;
            /// Details required in order to add an event listener to an element
            #[derive(Clone)]
            pub struct ListenDetails {
                pub selector: _rt::String,
                pub ty: _rt::String,
            }
            impl ::core::fmt::Debug for ListenDetails {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ListenDetails")
                        .field("selector", &self.selector)
                        .field("ty", &self.ty)
                        .finish()
                }
            }
            /// Context for the minijinja rendering
            #[derive(Clone)]
            pub struct Page {
                pub title: _rt::String,
            }
            impl ::core::fmt::Debug for Page {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Page").field("title", &self.title).finish()
                }
            }
            #[derive(Clone)]
            pub struct Input {
                pub placeholder: _rt::String,
                pub encrypted_seed: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Input {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Input")
                        .field("placeholder", &self.placeholder)
                        .field("encrypted-seed", &self.encrypted_seed)
                        .finish()
                }
            }
            /// Content for the entire page
            #[derive(Clone)]
            pub struct Content {
                pub page: Option<Page>,
                pub input: Option<Input>,
                pub load: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Content {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Content")
                        .field("page", &self.page)
                        .field("input", &self.input)
                        .field("load", &self.load)
                        .finish()
                }
            }
            /// Context variants
            #[derive(Clone)]
            pub enum Context {
                AllContent(Content),
                Username(_rt::String),
                Password(_rt::String),
                Encrypted(Encrypted),
                Submit,
            }
            impl ::core::fmt::Debug for Context {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Context::AllContent(e) => {
                            f.debug_tuple("Context::AllContent").field(e).finish()
                        }
                        Context::Username(e) => {
                            f.debug_tuple("Context::Username").field(e).finish()
                        }
                        Context::Password(e) => {
                            f.debug_tuple("Context::Password").field(e).finish()
                        }
                        Context::Encrypted(e) => {
                            f.debug_tuple("Context::Encrypted").field(e).finish()
                        }
                        Context::Submit => f.debug_tuple("Context::Submit").finish(),
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod wurbo_out {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Context = super::super::super::seed_keeper::wit_ui::wurbo_types::Context;
            #[allow(unused_unsafe, clippy::all)]
            /// renders the initial Web component with the given data
            /// and the target template to use as top level entry point
            pub fn render(ctx: &Context) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V14;
                    let (
                        result15_0,
                        result15_1,
                        result15_2,
                        result15_3,
                        result15_4,
                        result15_5,
                        result15_6,
                        result15_7,
                        result15_8,
                        result15_9,
                        result15_10,
                        result15_11,
                        result15_12,
                    ) = match ctx {
                        V14::AllContent(e) => {
                            let super::super::super::seed_keeper::wit_ui::wurbo_types::Content {
                                page: page0,
                                input: input0,
                                load: load0,
                            } = e;
                            let (result3_0, result3_1, result3_2) = match page0 {
                                Some(e) => {
                                    let super::super::super::seed_keeper::wit_ui::wurbo_types::Page{ title:title1, } = e;
                                    let vec2 = title1;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();

                                    (1i32, ptr2.cast_mut(), len2)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result8_0, result8_1, result8_2, result8_3, result8_4, result8_5) =
                                match input0 {
                                    Some(e) => {
                                        let super::super::super::seed_keeper::wit_ui::wurbo_types::Input{ placeholder:placeholder4, encrypted_seed:encrypted_seed4, } = e;
                                        let vec5 = placeholder4;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        let (result7_0, result7_1, result7_2) =
                                            match encrypted_seed4 {
                                                Some(e) => {
                                                    let vec6 = e;
                                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                                    let len6 = vec6.len();

                                                    (1i32, ptr6.cast_mut(), len6)
                                                }
                                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                                            };
                                        (
                                            1i32,
                                            ptr5.cast_mut(),
                                            len5,
                                            result7_0,
                                            result7_1,
                                            result7_2,
                                        )
                                    }
                                    None => (
                                        0i32,
                                        ::core::ptr::null_mut(),
                                        0usize,
                                        0i32,
                                        ::core::ptr::null_mut(),
                                        0usize,
                                    ),
                                };
                            let (result10_0, result10_1, result10_2) = match load0 {
                                Some(e) => {
                                    let vec9 = e;
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();

                                    (1i32, ptr9.cast_mut(), len9)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                0i32,
                                result3_0 as *mut u8,
                                result3_1,
                                result3_2,
                                result8_0,
                                result8_1,
                                result8_2,
                                result8_3,
                                result8_4,
                                result8_5,
                                result10_0,
                                result10_1,
                                result10_2,
                            )
                        }
                        V14::Username(e) => {
                            let vec11 = e;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();

                            (
                                1i32,
                                ptr11.cast_mut(),
                                len11 as *mut u8,
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        V14::Password(e) => {
                            let vec12 = e;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();

                            (
                                2i32,
                                ptr12.cast_mut(),
                                len12 as *mut u8,
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        V14::Encrypted(e) => {
                            let vec13 = e;
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();

                            (
                                3i32,
                                ptr13.cast_mut(),
                                len13 as *mut u8,
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                        V14::Submit => (
                            4i32,
                            ::core::ptr::null_mut(),
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                            0i32,
                            ::core::ptr::null_mut(),
                            0usize,
                        ),
                    };
                    let ptr16 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
                    extern "C" {
                        #[link_name = "render"]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: *mut u8,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result15_0,
                        result15_1,
                        result15_2,
                        result15_3,
                        result15_4,
                        result15_5,
                        result15_6,
                        result15_7,
                        result15_8,
                        result15_9,
                        result15_10,
                        result15_11,
                        result15_12,
                        ptr16,
                    );
                    let l17 = i32::from(*ptr16.add(0).cast::<u8>());
                    match l17 {
                        0 => {
                            let e = {
                                let l18 = *ptr16.add(4).cast::<*mut u8>();
                                let l19 = *ptr16.add(8).cast::<usize>();
                                let len20 = l19;
                                let bytes20 = _rt::Vec::from_raw_parts(l18.cast(), len20, len20);

                                _rt::string_lift(bytes20)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l21 = *ptr16.add(4).cast::<*mut u8>();
                                let l22 = *ptr16.add(8).cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                _rt::string_lift(bytes23)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// listen on all or given selectors
            pub fn activate(selectors: Option<&[_rt::String]>) {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    let (result2_0, result2_1, result2_2) = match selectors {
                        Some(e) => {
                            let vec1 = e;
                            let len1 = vec1.len();
                            let layout1 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                            let result1 = if layout1.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout1);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec1.into_iter().enumerate() {
                                let base = result1.add(i * 8);
                                {
                                    let vec0 = e;
                                    let ptr0 = vec0.as_ptr().cast::<u8>();
                                    let len0 = vec0.len();
                                    *base.add(4).cast::<usize>() = len0;
                                    *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result1, layout1)]);

                            (1i32, result1, len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
                    extern "C" {
                        #[link_name = "activate"]
                        fn wit_import(_: i32, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(result2_0, result2_1, result2_2);
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                }
            }
        }
    }
}
pub mod exports {
    pub mod peerpiper {
        pub mod wallet {
            #[allow(clippy::all)]
            pub mod wurbo_out {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Context =
                    super::super::super::super::peerpiper::wallet::context_types::Context;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_render_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    use super::super::super::super::peerpiper::wallet::context_types::Context as V153;
                    let v153 = match l0 {
                        0 => {
                            let e153 = {
                                let l1 = *arg0.add(4).cast::<*mut u8>();
                                let l2 = *arg0.add(8).cast::<usize>();
                                let len3 = l2;
                                let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                                let l4 = i32::from(*arg0.add(12).cast::<u8>());
                                use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V30;
                                let v30 = match l4 {
                                    0 => {
                                        let e30 = {
                                            let l5 = i32::from(*arg0.add(16).cast::<u8>());
                                            let l9 = i32::from(*arg0.add(28).cast::<u8>());
                                            let l17 = i32::from(*arg0.add(52).cast::<u8>());

                                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                      page: match l5 {
                        0 => None,
                        1 => {
                          let e = {
                            let l6 = *arg0.add(20).cast::<*mut u8>();
                            let l7 = *arg0.add(24).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                              title: _rt::string_lift(bytes8),
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                      input: match l9 {
                        0 => None,
                        1 => {
                          let e = {
                            let l10 = *arg0.add(32).cast::<*mut u8>();
                            let l11 = *arg0.add(36).cast::<usize>();
                            let len12 = l11;
                            let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                            let l13 = i32::from(*arg0.add(40).cast::<u8>());

                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                              placeholder: _rt::string_lift(bytes12),
                              encrypted_seed: match l13 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l14 = *arg0.add(44).cast::<*mut u8>();
                                    let l15 = *arg0.add(48).cast::<usize>();
                                    let len16 = l15;
                                    let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                    _rt::string_lift(bytes16)
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                      load: match l17 {
                        0 => None,
                        1 => {
                          let e = {
                            let l18 = *arg0.add(56).cast::<*mut u8>();
                            let l19 = *arg0.add(60).cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(l18.cast(), len20, len20);

                            _rt::string_lift(bytes20)
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                    }
                                        };
                                        V30::AllContent(e30)
                                    }
                                    1 => {
                                        let e30 = {
                                            let l21 = *arg0.add(16).cast::<*mut u8>();
                                            let l22 = *arg0.add(20).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 =
                                                _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                            _rt::string_lift(bytes23)
                                        };
                                        V30::Username(e30)
                                    }
                                    2 => {
                                        let e30 = {
                                            let l24 = *arg0.add(16).cast::<*mut u8>();
                                            let l25 = *arg0.add(20).cast::<usize>();
                                            let len26 = l25;
                                            let bytes26 =
                                                _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                            _rt::string_lift(bytes26)
                                        };
                                        V30::Password(e30)
                                    }
                                    3 => {
                                        let e30 = {
                                            let l27 = *arg0.add(16).cast::<*mut u8>();
                                            let l28 = *arg0.add(20).cast::<usize>();
                                            let len29 = l28;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(l27.cast(), len29, len29);

                                            _rt::string_lift(bytes29)
                                        };
                                        V30::Encrypted(e30)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        V30::Submit
                                    }
                                };
                                let l31 = i32::from(*arg0.add(64).cast::<u8>());
                                use super::super::super::super::delano::wit_ui::context_types::Context as V66;
                                let v66 = match l31 {
                                    0 => {
                                        let e66 = {
                                            let l32 = i32::from(*arg0.add(68).cast::<u8>());
                                            let l42 = i32::from(*arg0.add(96).cast::<u8>());

                                            super::super::super::super::delano::wit_ui::context_types::Everything{
                      page: match l32 {
                        0 => None,
                        1 => {
                          let e = {
                            let l33 = *arg0.add(72).cast::<*mut u8>();
                            let l34 = *arg0.add(76).cast::<usize>();
                            let len35 = l34;
                            let bytes35 = _rt::Vec::from_raw_parts(l33.cast(), len35, len35);
                            let l36 = *arg0.add(80).cast::<*mut u8>();
                            let l37 = *arg0.add(84).cast::<usize>();
                            let len38 = l37;
                            let bytes38 = _rt::Vec::from_raw_parts(l36.cast(), len38, len38);
                            let l39 = *arg0.add(88).cast::<*mut u8>();
                            let l40 = *arg0.add(92).cast::<usize>();
                            let len41 = l40;
                            let bytes41 = _rt::Vec::from_raw_parts(l39.cast(), len41, len41);

                            super::super::super::super::delano::wit_ui::context_types::Page{
                              name: _rt::string_lift(bytes35),
                              version: _rt::string_lift(bytes38),
                              description: _rt::string_lift(bytes41),
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                      load: match l42 {
                        0 => None,
                        1 => {
                          let e = {
                            let l43 = *arg0.add(100).cast::<*mut u8>();
                            let l44 = *arg0.add(104).cast::<usize>();
                            let len45 = l44;
                            let bytes45 = _rt::Vec::from_raw_parts(l43.cast(), len45, len45);

                            _rt::string_lift(bytes45)
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                    }
                                        };
                                        V66::AllContent(e66)
                                    }
                                    1 => V66::Addattribute,
                                    2 => V66::Newentry,
                                    3 => {
                                        let e66 = {
                                            let l46 = *arg0.add(68).cast::<i32>();
                                            let l47 = i32::from(*arg0.add(72).cast::<u8>());
                                            use super::super::super::super::delano::wit_ui::context_types::Kovindex as V52;
                                            let v52 = match l47 {
                                                0 => {
                                                    let e52 = {
                                                        let l48 = *arg0.add(76).cast::<i32>();

                                                        l48 as u32
                                                    };
                                                    V52::Key(e52)
                                                }
                                                1 => {
                                                    let e52 = {
                                                        let l49 = *arg0.add(76).cast::<i32>();

                                                        l49 as u32
                                                    };
                                                    V52::Op(e52)
                                                }
                                                2 => {
                                                    let e52 = {
                                                        let l50 = *arg0.add(76).cast::<i32>();

                                                        l50 as u32
                                                    };
                                                    V52::Value(e52)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 3,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e52 = {
                                                        let l51 = *arg0.add(76).cast::<i32>();

                                                        l51 as u32
                                                    };
                                                    V52::Selected(e52)
                                                }
                                            };
                                            let l53 = *arg0.add(80).cast::<*mut u8>();
                                            let l54 = *arg0.add(84).cast::<usize>();
                                            let len55 = l54;
                                            let bytes55 =
                                                _rt::Vec::from_raw_parts(l53.cast(), len55, len55);

                                            super::super::super::super::delano::wit_ui::context_types::Kvctx{
                      ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                        idx: l46 as u32,
                        val: v52,
                      },
                      value: _rt::string_lift(bytes55),
                    }
                                        };
                                        V66::Editattribute(e66)
                                    }
                                    4 => {
                                        let e66 = {
                                            let l56 = i32::from(*arg0.add(68).cast::<u8>());

                                            l56 as u8
                                        };
                                        V66::Editmaxentries(e66)
                                    }
                                    5 => V66::Generateoffer,
                                    6 => V66::Generateproof,
                                    7 => V66::Publishproof,
                                    n => {
                                        debug_assert_eq!(n, 8, "invalid enum discriminant");
                                        let e66 = {
                                            let l57 = *arg0.add(68).cast::<*mut u8>();
                                            let l58 = *arg0.add(72).cast::<usize>();
                                            let len59 = l58;
                                            let bytes59 =
                                                _rt::Vec::from_raw_parts(l57.cast(), len59, len59);
                                            let l60 = *arg0.add(76).cast::<*mut u8>();
                                            let l61 = *arg0.add(80).cast::<usize>();
                                            let len62 = l61;
                                            let bytes62 =
                                                _rt::Vec::from_raw_parts(l60.cast(), len62, len62);
                                            let l63 = *arg0.add(84).cast::<*mut u8>();
                                            let l64 = *arg0.add(88).cast::<usize>();
                                            let len65 = l64;

                                            super::super::super::super::delano::wit_ui::context_types::Message{
                      peer: _rt::string_lift(bytes59),
                      topic: _rt::string_lift(bytes62),
                      data: _rt::Vec::from_raw_parts(l63.cast(), len65, len65),
                    }
                                        };
                                        V66::Networkevent(e66)
                                    }
                                };

                                super::super::super::super::peerpiper::wallet::context_types::Content{
                app: super::super::super::super::peerpiper::wallet::context_types::App{
                  title: _rt::string_lift(bytes3),
                },
                seed_ui: v30,
                delano_ui: v66,
              }
                            };
                            V153::AllContent(e153)
                        }
                        1 => {
                            let e153 = {
                                let l67 = i32::from(*arg0.add(4).cast::<u8>());
                                use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V93;
                                let v93 = match l67 {
                                    0 => {
                                        let e93 = {
                                            let l68 = i32::from(*arg0.add(8).cast::<u8>());
                                            let l72 = i32::from(*arg0.add(20).cast::<u8>());
                                            let l80 = i32::from(*arg0.add(44).cast::<u8>());

                                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                      page: match l68 {
                        0 => None,
                        1 => {
                          let e = {
                            let l69 = *arg0.add(12).cast::<*mut u8>();
                            let l70 = *arg0.add(16).cast::<usize>();
                            let len71 = l70;
                            let bytes71 = _rt::Vec::from_raw_parts(l69.cast(), len71, len71);

                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                              title: _rt::string_lift(bytes71),
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                      input: match l72 {
                        0 => None,
                        1 => {
                          let e = {
                            let l73 = *arg0.add(24).cast::<*mut u8>();
                            let l74 = *arg0.add(28).cast::<usize>();
                            let len75 = l74;
                            let bytes75 = _rt::Vec::from_raw_parts(l73.cast(), len75, len75);
                            let l76 = i32::from(*arg0.add(32).cast::<u8>());

                            super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                              placeholder: _rt::string_lift(bytes75),
                              encrypted_seed: match l76 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l77 = *arg0.add(36).cast::<*mut u8>();
                                    let l78 = *arg0.add(40).cast::<usize>();
                                    let len79 = l78;
                                    let bytes79 = _rt::Vec::from_raw_parts(l77.cast(), len79, len79);

                                    _rt::string_lift(bytes79)
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                      load: match l80 {
                        0 => None,
                        1 => {
                          let e = {
                            let l81 = *arg0.add(48).cast::<*mut u8>();
                            let l82 = *arg0.add(52).cast::<usize>();
                            let len83 = l82;
                            let bytes83 = _rt::Vec::from_raw_parts(l81.cast(), len83, len83);

                            _rt::string_lift(bytes83)
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                    }
                                        };
                                        V93::AllContent(e93)
                                    }
                                    1 => {
                                        let e93 = {
                                            let l84 = *arg0.add(8).cast::<*mut u8>();
                                            let l85 = *arg0.add(12).cast::<usize>();
                                            let len86 = l85;
                                            let bytes86 =
                                                _rt::Vec::from_raw_parts(l84.cast(), len86, len86);

                                            _rt::string_lift(bytes86)
                                        };
                                        V93::Username(e93)
                                    }
                                    2 => {
                                        let e93 = {
                                            let l87 = *arg0.add(8).cast::<*mut u8>();
                                            let l88 = *arg0.add(12).cast::<usize>();
                                            let len89 = l88;
                                            let bytes89 =
                                                _rt::Vec::from_raw_parts(l87.cast(), len89, len89);

                                            _rt::string_lift(bytes89)
                                        };
                                        V93::Password(e93)
                                    }
                                    3 => {
                                        let e93 = {
                                            let l90 = *arg0.add(8).cast::<*mut u8>();
                                            let l91 = *arg0.add(12).cast::<usize>();
                                            let len92 = l91;
                                            let bytes92 =
                                                _rt::Vec::from_raw_parts(l90.cast(), len92, len92);

                                            _rt::string_lift(bytes92)
                                        };
                                        V93::Encrypted(e93)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        V93::Submit
                                    }
                                };

                                v93
                            };
                            V153::Seed(e153)
                        }
                        2 => {
                            let e153 = {
                                let l94 = i32::from(*arg0.add(4).cast::<u8>());
                                use super::super::super::super::delano::wit_ui::context_types::Context as V129;
                                let v129 = match l94 {
                                    0 => {
                                        let e129 = {
                                            let l95 = i32::from(*arg0.add(8).cast::<u8>());
                                            let l105 = i32::from(*arg0.add(36).cast::<u8>());

                                            super::super::super::super::delano::wit_ui::context_types::Everything{
                      page: match l95 {
                        0 => None,
                        1 => {
                          let e = {
                            let l96 = *arg0.add(12).cast::<*mut u8>();
                            let l97 = *arg0.add(16).cast::<usize>();
                            let len98 = l97;
                            let bytes98 = _rt::Vec::from_raw_parts(l96.cast(), len98, len98);
                            let l99 = *arg0.add(20).cast::<*mut u8>();
                            let l100 = *arg0.add(24).cast::<usize>();
                            let len101 = l100;
                            let bytes101 = _rt::Vec::from_raw_parts(l99.cast(), len101, len101);
                            let l102 = *arg0.add(28).cast::<*mut u8>();
                            let l103 = *arg0.add(32).cast::<usize>();
                            let len104 = l103;
                            let bytes104 = _rt::Vec::from_raw_parts(l102.cast(), len104, len104);

                            super::super::super::super::delano::wit_ui::context_types::Page{
                              name: _rt::string_lift(bytes98),
                              version: _rt::string_lift(bytes101),
                              description: _rt::string_lift(bytes104),
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                      load: match l105 {
                        0 => None,
                        1 => {
                          let e = {
                            let l106 = *arg0.add(40).cast::<*mut u8>();
                            let l107 = *arg0.add(44).cast::<usize>();
                            let len108 = l107;
                            let bytes108 = _rt::Vec::from_raw_parts(l106.cast(), len108, len108);

                            _rt::string_lift(bytes108)
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                    }
                                        };
                                        V129::AllContent(e129)
                                    }
                                    1 => V129::Addattribute,
                                    2 => V129::Newentry,
                                    3 => {
                                        let e129 = {
                                            let l109 = *arg0.add(8).cast::<i32>();
                                            let l110 = i32::from(*arg0.add(12).cast::<u8>());
                                            use super::super::super::super::delano::wit_ui::context_types::Kovindex as V115;
                                            let v115 = match l110 {
                                                0 => {
                                                    let e115 = {
                                                        let l111 = *arg0.add(16).cast::<i32>();

                                                        l111 as u32
                                                    };
                                                    V115::Key(e115)
                                                }
                                                1 => {
                                                    let e115 = {
                                                        let l112 = *arg0.add(16).cast::<i32>();

                                                        l112 as u32
                                                    };
                                                    V115::Op(e115)
                                                }
                                                2 => {
                                                    let e115 = {
                                                        let l113 = *arg0.add(16).cast::<i32>();

                                                        l113 as u32
                                                    };
                                                    V115::Value(e115)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 3,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e115 = {
                                                        let l114 = *arg0.add(16).cast::<i32>();

                                                        l114 as u32
                                                    };
                                                    V115::Selected(e115)
                                                }
                                            };
                                            let l116 = *arg0.add(20).cast::<*mut u8>();
                                            let l117 = *arg0.add(24).cast::<usize>();
                                            let len118 = l117;
                                            let bytes118 = _rt::Vec::from_raw_parts(
                                                l116.cast(),
                                                len118,
                                                len118,
                                            );

                                            super::super::super::super::delano::wit_ui::context_types::Kvctx{
                      ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                        idx: l109 as u32,
                        val: v115,
                      },
                      value: _rt::string_lift(bytes118),
                    }
                                        };
                                        V129::Editattribute(e129)
                                    }
                                    4 => {
                                        let e129 = {
                                            let l119 = i32::from(*arg0.add(8).cast::<u8>());

                                            l119 as u8
                                        };
                                        V129::Editmaxentries(e129)
                                    }
                                    5 => V129::Generateoffer,
                                    6 => V129::Generateproof,
                                    7 => V129::Publishproof,
                                    n => {
                                        debug_assert_eq!(n, 8, "invalid enum discriminant");
                                        let e129 = {
                                            let l120 = *arg0.add(8).cast::<*mut u8>();
                                            let l121 = *arg0.add(12).cast::<usize>();
                                            let len122 = l121;
                                            let bytes122 = _rt::Vec::from_raw_parts(
                                                l120.cast(),
                                                len122,
                                                len122,
                                            );
                                            let l123 = *arg0.add(16).cast::<*mut u8>();
                                            let l124 = *arg0.add(20).cast::<usize>();
                                            let len125 = l124;
                                            let bytes125 = _rt::Vec::from_raw_parts(
                                                l123.cast(),
                                                len125,
                                                len125,
                                            );
                                            let l126 = *arg0.add(24).cast::<*mut u8>();
                                            let l127 = *arg0.add(28).cast::<usize>();
                                            let len128 = l127;

                                            super::super::super::super::delano::wit_ui::context_types::Message{
                      peer: _rt::string_lift(bytes122),
                      topic: _rt::string_lift(bytes125),
                      data: _rt::Vec::from_raw_parts(l126.cast(), len128, len128),
                    }
                                        };
                                        V129::Networkevent(e129)
                                    }
                                };

                                v129
                            };
                            V153::Delano(e153)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e153 = {
                                let l130 = i32::from(*arg0.add(4).cast::<u8>());
                                use super::super::super::super::peerpiper::wallet::context_types::Events as V152;
                                let v152 = match l130 {
                                    0 => {
                                        let e152 = {
                                            let l131 = *arg0.add(8).cast::<*mut u8>();
                                            let l132 = *arg0.add(12).cast::<usize>();
                                            let len133 = l132;
                                            let bytes133 = _rt::Vec::from_raw_parts(
                                                l131.cast(),
                                                len133,
                                                len133,
                                            );

                                            super::super::super::super::peerpiper::wallet::context_types::Seed{
                      seed: _rt::string_lift(bytes133),
                    }
                                        };
                                        V152::Encrypted(e152)
                                    }
                                    1 => {
                                        let e152 = {
                                            let l134 = *arg0.add(8).cast::<*mut u8>();
                                            let l135 = *arg0.add(12).cast::<usize>();
                                            let len136 = l135;
                                            let bytes136 = _rt::Vec::from_raw_parts(
                                                l134.cast(),
                                                len136,
                                                len136,
                                            );
                                            let l137 = *arg0.add(16).cast::<*mut u8>();
                                            let l138 = *arg0.add(20).cast::<usize>();
                                            let len139 = l138;
                                            let bytes139 = _rt::Vec::from_raw_parts(
                                                l137.cast(),
                                                len139,
                                                len139,
                                            );
                                            let l140 = *arg0.add(24).cast::<*mut u8>();
                                            let l141 = *arg0.add(28).cast::<usize>();
                                            let len142 = l141;

                                            super::super::super::super::peerpiper::wallet::context_types::Message{
                      peer: _rt::string_lift(bytes136),
                      topic: _rt::string_lift(bytes139),
                      data: _rt::Vec::from_raw_parts(l140.cast(), len142, len142),
                    }
                                        };
                                        V152::Message(e152)
                                    }
                                    2 => {
                                        let e152 = {
                                            let l143 = *arg0.add(8).cast::<*mut u8>();
                                            let l144 = *arg0.add(12).cast::<usize>();
                                            let len145 = l144;
                                            let bytes145 = _rt::Vec::from_raw_parts(
                                                l143.cast(),
                                                len145,
                                                len145,
                                            );
                                            let l146 = *arg0.add(16).cast::<*mut u8>();
                                            let l147 = *arg0.add(20).cast::<usize>();
                                            let len148 = l147;

                                            super::super::super::super::peerpiper::wallet::context_types::PublishMessage{
                      key: _rt::string_lift(bytes145),
                      value: _rt::Vec::from_raw_parts(l146.cast(), len148, len148),
                    }
                                        };
                                        V152::Publish(e152)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                        let e152 = {
                                            let l149 = *arg0.add(8).cast::<*mut u8>();
                                            let l150 = *arg0.add(12).cast::<usize>();
                                            let len151 = l150;
                                            let bytes151 = _rt::Vec::from_raw_parts(
                                                l149.cast(),
                                                len151,
                                                len151,
                                            );

                                            super::super::super::super::peerpiper::wallet::context_types::SubscribeTopic{
                      key: _rt::string_lift(bytes151),
                    }
                                        };
                                        V152::Subscribe(e152)
                                    }
                                };

                                v152
                            };
                            V153::Event(e153)
                        }
                    };
                    let result154 = T::render(v153);
                    _rt::cabi_dealloc(arg0, 108, 4);
                    let ptr155 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result154 {
                        Ok(e) => {
                            *ptr155.add(0).cast::<u8>() = (0i32) as u8;
                            let vec156 = (e.into_bytes()).into_boxed_slice();
                            let ptr156 = vec156.as_ptr().cast::<u8>();
                            let len156 = vec156.len();
                            ::core::mem::forget(vec156);
                            *ptr155.add(8).cast::<usize>() = len156;
                            *ptr155.add(4).cast::<*mut u8>() = ptr156.cast_mut();
                        }
                        Err(e) => {
                            *ptr155.add(0).cast::<u8>() = (1i32) as u8;
                            let vec157 = (e.into_bytes()).into_boxed_slice();
                            let ptr157 = vec157.as_ptr().cast::<u8>();
                            let len157 = vec157.len();
                            ::core::mem::forget(vec157);
                            *ptr155.add(8).cast::<usize>() = len157;
                            *ptr155.add(4).cast::<*mut u8>() = ptr157.cast_mut();
                        }
                    };
                    ptr155
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_render<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_activate_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    T::activate(match arg0 {
                        0 => None,
                        1 => {
                            let e = {
                                let base3 = arg1;
                                let len3 = arg2;
                                let mut result3 = _rt::Vec::with_capacity(len3);
                                for i in 0..len3 {
                                    let base = base3.add(i * 8);
                                    let e3 = {
                                        let l0 = *base.add(0).cast::<*mut u8>();
                                        let l1 = *base.add(4).cast::<usize>();
                                        let len2 = l1;
                                        let bytes2 =
                                            _rt::Vec::from_raw_parts(l0.cast(), len2, len2);

                                        _rt::string_lift(bytes2)
                                    };
                                    result3.push(e3);
                                }
                                _rt::cabi_dealloc(base3, len3 * 8, 4);

                                result3
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    });
                }
                pub trait Guest {
                    /// renders the initial Web component with the given data
                    fn render(ctx: Context) -> Result<_rt::String, _rt::String>;
                    /// activate listening
                    fn activate(selectors: Option<_rt::Vec<_rt::String>>);
                }
                #[doc(hidden)]

                macro_rules! __export_peerpiper_wallet_wurbo_out_0_1_0_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "peerpiper:wallet/wurbo-out@0.1.0#render"]
        unsafe extern "C" fn export_render(arg0: *mut u8,) -> *mut u8 {
          $($path_to_types)*::_export_render_cabi::<$ty>(arg0)
        }
        #[export_name = "cabi_post_peerpiper:wallet/wurbo-out@0.1.0#render"]
        unsafe extern "C" fn _post_return_render(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_render::<$ty>(arg0)
        }
        #[export_name = "peerpiper:wallet/wurbo-out@0.1.0#activate"]
        unsafe extern "C" fn export_activate(arg0: i32,arg1: *mut u8,arg2: usize,) {
          $($path_to_types)*::_export_activate_cabi::<$ty>(arg0, arg1, arg2)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_peerpiper_wallet_wurbo_out_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }

            #[allow(clippy::all)]
            pub mod aggregation {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_activates_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    T::activates(match arg0 {
                        0 => None,
                        1 => {
                            let e = {
                                let base3 = arg1;
                                let len3 = arg2;
                                let mut result3 = _rt::Vec::with_capacity(len3);
                                for i in 0..len3 {
                                    let base = base3.add(i * 8);
                                    let e3 = {
                                        let l0 = *base.add(0).cast::<*mut u8>();
                                        let l1 = *base.add(4).cast::<usize>();
                                        let len2 = l1;
                                        let bytes2 =
                                            _rt::Vec::from_raw_parts(l0.cast(), len2, len2);

                                        _rt::string_lift(bytes2)
                                    };
                                    result3.push(e3);
                                }
                                _rt::cabi_dealloc(base3, len3 * 8, 4);

                                result3
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    });
                }
                pub trait Guest {
                    /// calls activate on on the child components
                    fn activates(selectors: Option<_rt::Vec<_rt::String>>);
                }
                #[doc(hidden)]

                macro_rules! __export_peerpiper_wallet_aggregation_0_1_0_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "peerpiper:wallet/aggregation@0.1.0#activates"]
      unsafe extern "C" fn export_activates(arg0: i32,arg1: *mut u8,arg2: usize,) {
        $($path_to_types)*::_export_activates_cabi::<$ty>(arg0, arg1, arg2)
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_peerpiper_wallet_aggregation_0_1_0_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::alloc;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_peerpiper_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::peerpiper::wallet::wurbo_out::__export_peerpiper_wallet_wurbo_out_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::peerpiper::wallet::wurbo_out);
  $($path_to_types_root)*::exports::peerpiper::wallet::aggregation::__export_peerpiper_wallet_aggregation_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::peerpiper::wallet::aggregation);
  )
}
#[doc(inline)]
pub(crate) use __export_peerpiper_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:peerpiper:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1990] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc6\x0e\x01A\x02\x01\
A\x16\x01B\x0f\x01s\x04\0\x09encrypted\x03\0\0\x01r\x02\x08selectors\x02tys\x04\0\
\x0elisten-details\x03\0\x02\x01r\x01\x05titles\x04\0\x04page\x03\0\x04\x01ks\x01\
r\x02\x0bplaceholders\x0eencrypted-seed\x06\x04\0\x05input\x03\0\x07\x01k\x05\x01\
k\x08\x01r\x03\x04page\x09\x05input\x0a\x04load\x06\x04\0\x07content\x03\0\x0b\x01\
q\x05\x0ball-content\x01\x0c\0\x08username\x01s\0\x08password\x01s\0\x09encrypte\
d\x01\x01\0\x06submit\0\0\x04\0\x07context\x03\0\x0d\x03\x01$seed-keeper:wit-ui/\
wurbo-types@0.1.0\x05\0\x02\x03\0\0\x07context\x01B\x09\x02\x03\x02\x01\x01\x04\0\
\x07context\x03\0\0\x01j\x01s\x01s\x01@\x01\x03ctx\x01\0\x02\x04\0\x06render\x01\
\x03\x01ps\x01k\x04\x01@\x01\x09selectors\x05\x01\0\x04\0\x08activate\x01\x06\x03\
\x01\"seed-keeper:wit-ui/wurbo-out@0.1.0\x05\x02\x01B\x13\x01r\x03\x04names\x07v\
ersions\x0bdescriptions\x04\0\x04page\x03\0\0\x01k\x01\x01ks\x01r\x02\x04page\x02\
\x04load\x03\x04\0\x0aeverything\x03\0\x04\x01r\x02\x03keys\x05values\x04\0\x09i\
nput-ctx\x03\0\x06\x01q\x04\x03key\x01y\0\x02op\x01y\0\x05value\x01y\0\x08select\
ed\x01y\0\x04\0\x08kovindex\x03\0\x08\x01r\x02\x03idxy\x03val\x09\x04\0\x05entry\
\x03\0\x0a\x01r\x02\x03ctx\x0b\x05values\x04\0\x05kvctx\x03\0\x0c\x01p}\x01r\x03\
\x04peers\x05topics\x04data\x0e\x04\0\x07message\x03\0\x0f\x01q\x09\x0ball-conte\
nt\x01\x05\0\x0caddattribute\0\0\x08newentry\0\0\x0deditattribute\x01\x0d\0\x0ee\
ditmaxentries\x01}\0\x0dgenerateoffer\0\0\x0dgenerateproof\0\0\x0cpublishproof\0\
\0\x0cnetworkevent\x01\x10\0\x04\0\x07context\x03\0\x11\x03\x01!delano:wit-ui/co\
ntext-types@0.1.0\x05\x03\x02\x03\0\x02\x07context\x01B\x09\x02\x03\x02\x01\x04\x04\
\0\x07context\x03\0\0\x01j\x01s\x01s\x01@\x01\x03ctx\x01\0\x02\x04\0\x06render\x01\
\x03\x01ps\x01k\x04\x01@\x01\x09selectors\x05\x01\0\x04\0\x08activate\x01\x06\x03\
\x01\x1ddelano:wit-ui/wurbo-out@0.1.0\x05\x05\x02\x03\0\x01\x07context\x02\x03\0\
\x03\x07context\x01B\x17\x02\x03\x02\x01\x06\x04\0\x0cseed-context\x03\0\0\x02\x03\
\x02\x01\x07\x04\0\x0edelano-context\x03\0\x02\x01r\x02\x08selectors\x02tys\x04\0\
\x0elisten-details\x03\0\x04\x01r\x01\x05titles\x04\0\x03app\x03\0\x06\x01r\x03\x03\
app\x07\x07seed-ui\x01\x09delano-ui\x03\x04\0\x07content\x03\0\x08\x01r\x01\x04s\
eeds\x04\0\x04seed\x03\0\x0a\x01p}\x01r\x03\x04peers\x05topics\x04data\x0c\x04\0\
\x07message\x03\0\x0d\x01r\x02\x03keys\x05value\x0c\x04\0\x0fpublish-message\x03\
\0\x0f\x01r\x01\x03keys\x04\0\x0fsubscribe-topic\x03\0\x11\x01q\x04\x09encrypted\
\x01\x0b\0\x07message\x01\x0e\0\x07publish\x01\x10\0\x09subscribe\x01\x12\0\x04\0\
\x06events\x03\0\x13\x01q\x04\x0ball-content\x01\x09\0\x04seed\x01\x01\0\x06dela\
no\x01\x03\0\x05event\x01\x14\0\x04\0\x07context\x03\0\x15\x03\x01$peerpiper:wal\
let/context-types@0.1.0\x05\x08\x02\x03\0\x04\x0elisten-details\x01B\x08\x02\x03\
\x02\x01\x09\x04\0\x0elisten-details\x03\0\0\x01@\x01\x07details\x01\x01\0\x04\0\
\x10addeventlistener\x01\x02\x01@\x01\x07messages\x01\0\x04\0\x04emit\x01\x03\x01\
@\x01\x04hashs\x01\0\x04\0\x08set-hash\x01\x04\x03\x01\x1fpeerpiper:wallet/wurbo\
-in@0.1.0\x05\x0a\x02\x03\0\x04\x07context\x01B\x09\x02\x03\x02\x01\x0b\x04\0\x07\
context\x03\0\0\x01j\x01s\x01s\x01@\x01\x03ctx\x01\0\x02\x04\0\x06render\x01\x03\
\x01ps\x01k\x04\x01@\x01\x09selectors\x05\x01\0\x04\0\x08activate\x01\x06\x04\x01\
\x20peerpiper:wallet/wurbo-out@0.1.0\x05\x0c\x01B\x04\x01ps\x01k\0\x01@\x01\x09s\
electors\x01\x01\0\x04\0\x09activates\x01\x02\x04\x01\"peerpiper:wallet/aggregat\
ion@0.1.0\x05\x0d\x04\x01\x20peerpiper:wallet/peerpiper@0.1.0\x04\0\x0b\x0f\x01\0\
\x09peerpiper\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
