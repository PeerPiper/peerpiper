// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod delano {
  pub mod wit_ui {
    
    #[allow(clippy::all)]
    pub mod context_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The type of the app
      #[derive(Clone)]
      pub struct Page {
        pub name: wit_bindgen::rt::string::String,
        pub version: wit_bindgen::rt::string::String,
        pub description: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("name", &self.name).field("version", &self.version).field("description", &self.description).finish()
        }
      }
      #[derive(Clone)]
      pub struct Kov {
        pub key: wit_bindgen::rt::string::String,
        pub op: wit_bindgen::rt::string::String,
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Kov {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Kov").field("key", &self.key).field("op", &self.op).field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub struct Issuer {
        pub attributes: wit_bindgen::rt::vec::Vec::<Kov>,
        pub max_entries: u8,
      }
      impl ::core::fmt::Debug for Issuer {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Issuer").field("attributes", &self.attributes).field("max-entries", &self.max_entries).finish()
        }
      }
      #[derive(Clone)]
      pub struct Everything {
        pub page: Option<Page>,
        pub issue: Option<Issuer>,
        /// The base64URLsafe unpadded encoded JSON string of the loadable data (offer or proof)
        pub load: Option<wit_bindgen::rt::string::String>,
      }
      impl ::core::fmt::Debug for Everything {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Everything").field("page", &self.page).field("issue", &self.issue).field("load", &self.load).finish()
        }
      }
      #[derive(Clone, Copy)]
      pub enum Kovindex{
        Key(u32),
        Op(u32),
        Value(u32),
        Selected(u32),
      }
      impl ::core::fmt::Debug for Kovindex {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Kovindex::Key(e) => {
              f.debug_tuple("Kovindex::Key").field(e).finish()
            }
            Kovindex::Op(e) => {
              f.debug_tuple("Kovindex::Op").field(e).finish()
            }
            Kovindex::Value(e) => {
              f.debug_tuple("Kovindex::Value").field(e).finish()
            }
            Kovindex::Selected(e) => {
              f.debug_tuple("Kovindex::Selected").field(e).finish()
            }
          }
        }
      }
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Entry {
        pub idx: u32,
        pub val: Kovindex,
      }
      impl ::core::fmt::Debug for Entry {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Entry").field("idx", &self.idx).field("val", &self.val).finish()
        }
      }
      #[derive(Clone)]
      pub struct Kvctx {
        pub ctx: Entry,
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Kvctx {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Kvctx").field("ctx", &self.ctx).field("value", &self.value).finish()
        }
      }
      /// The type of context provided
      #[derive(Clone)]
      pub enum Context{
        AllContent(Everything),
        /// issuing(issuer),
        /// Adds a new attribute to an existing Entry of the Credential
        Addattribute,
        /// Adds a New Entry to the Credential
        Newentry,
        Editattribute(Kvctx),
        Editmaxentries(u8),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Addattribute => {
              f.debug_tuple("Context::Addattribute").finish()
            }
            Context::Newentry => {
              f.debug_tuple("Context::Newentry").finish()
            }
            Context::Editattribute(e) => {
              f.debug_tuple("Context::Editattribute").field(e).finish()
            }
            Context::Editmaxentries(e) => {
              f.debug_tuple("Context::Editmaxentries").field(e).finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_out {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Context = super::super::super::delano::wit_ui::context_types::Context;
      #[allow(unused_unsafe, clippy::all)]
      /// renders the initial Web component with the given data
      /// and the target template to use as top level entry point
      pub fn render(ctx: &Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          use super::super::super::delano::wit_ui::context_types::Context as V20;
          let (result21_0,result21_1,result21_2,result21_3,result21_4,result21_5,result21_6,result21_7,result21_8,result21_9,result21_10,result21_11,result21_12,result21_13,result21_14,) = match ctx {
            V20::AllContent(e) => {
              let super::super::super::delano::wit_ui::context_types::Everything{ page:page0, issue:issue0, load:load0, } = e;
              let (result5_0,result5_1,result5_2,result5_3,result5_4,result5_5,result5_6,) = match page0 {
                Some(e) => {
                  let super::super::super::delano::wit_ui::context_types::Page{ name:name1, version:version1, description:description1, } = e;
                  let vec2 = name1;
                  let ptr2 = vec2.as_ptr() as i32;
                  let len2 = vec2.len() as i32;
                  let vec3 = version1;
                  let ptr3 = vec3.as_ptr() as i32;
                  let len3 = vec3.len() as i32;
                  let vec4 = description1;
                  let ptr4 = vec4.as_ptr() as i32;
                  let len4 = vec4.len() as i32;
                  
                  (1i32, ptr2, len2, ptr3, len3, ptr4, len4)
                },
                None => {
                  (0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                },
              };let (result12_0,result12_1,result12_2,result12_3,) = match issue0 {
                Some(e) => {
                  let super::super::super::delano::wit_ui::context_types::Issuer{ attributes:attributes6, max_entries:max_entries6, } = e;
                  let vec11 = attributes6;
                  let len11 = vec11.len() as i32;
                  let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 4);
                  let result11 = if layout11.size() != 0
                  {
                    let ptr = alloc::alloc(layout11);
                    if ptr.is_null()
                    {
                      alloc::handle_alloc_error(layout11);
                    }
                    ptr
                  }else {{
                    ::core::ptr::null_mut()
                  }};
                  for (i, e) in vec11.into_iter().enumerate() {
                    let base = result11 as i32 + (i as i32) * 24;
                    {
                      let super::super::super::delano::wit_ui::context_types::Kov{ key:key7, op:op7, value:value7, } = e;
                      let vec8 = key7;
                      let ptr8 = vec8.as_ptr() as i32;
                      let len8 = vec8.len() as i32;
                      *((base + 4) as *mut i32) = len8;
                      *((base + 0) as *mut i32) = ptr8;
                      let vec9 = op7;
                      let ptr9 = vec9.as_ptr() as i32;
                      let len9 = vec9.len() as i32;
                      *((base + 12) as *mut i32) = len9;
                      *((base + 8) as *mut i32) = ptr9;
                      let vec10 = value7;
                      let ptr10 = vec10.as_ptr() as i32;
                      let len10 = vec10.len() as i32;
                      *((base + 20) as *mut i32) = len10;
                      *((base + 16) as *mut i32) = ptr10;
                    }
                  }
                  cleanup_list.extend_from_slice(&[(result11, layout11),]);
                  
                  (1i32, result11 as i32, len11, wit_bindgen::rt::as_i32(max_entries6))
                },
                None => {
                  (0i32, 0i32, 0i32, 0i32)
                },
              };let (result14_0,result14_1,result14_2,) = match load0 {
                Some(e) => {
                  let vec13 = e;
                  let ptr13 = vec13.as_ptr() as i32;
                  let len13 = vec13.len() as i32;
                  
                  (1i32, ptr13, len13)
                },
                None => {
                  (0i32, 0i32, 0i32)
                },
              };
              (0i32, result5_0, result5_1, result5_2, result5_3, result5_4, result5_5, result5_6, result12_0, result12_1, result12_2, result12_3, result14_0, result14_1, result14_2)
            },
            V20::Addattribute=> {
              (1i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
            V20::Newentry=> {
              (2i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            }
            V20::Editattribute(e) => {
              let super::super::super::delano::wit_ui::context_types::Kvctx{ ctx:ctx15, value:value15, } = e;
              let super::super::super::delano::wit_ui::context_types::Entry{ idx:idx16, val:val16, } = ctx15;
              use super::super::super::delano::wit_ui::context_types::Kovindex as V17;
              let (result18_0,result18_1,) = match val16 {
                V17::Key(e) => (0i32, wit_bindgen::rt::as_i32(e)),
                V17::Op(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                V17::Value(e) => (2i32, wit_bindgen::rt::as_i32(e)),
                V17::Selected(e) => (3i32, wit_bindgen::rt::as_i32(e)),
              };
              let vec19 = value15;
              let ptr19 = vec19.as_ptr() as i32;
              let len19 = vec19.len() as i32;
              
              (3i32, wit_bindgen::rt::as_i32(idx16), result18_0, result18_1, ptr19, len19, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
            },
            V20::Editmaxentries(e) => (4i32, wit_bindgen::rt::as_i32(e), 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32),
          };
          let ptr22 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wit-ui/wurbo-out@0.1.0")]
          extern "C" {
            #[link_name = "render"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result21_0, result21_1, result21_2, result21_3, result21_4, result21_5, result21_6, result21_7, result21_8, result21_9, result21_10, result21_11, result21_12, result21_13, result21_14, ptr22);
          let l23 = i32::from(*((ptr22 + 0) as *const u8));
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
          match l23 {
            0 => {
              let e = {
                let l24 = *((ptr22 + 4) as *const i32);
                let l25 = *((ptr22 + 8) as *const i32);
                let len26 = l25 as usize;
                let bytes26 = Vec::from_raw_parts(l24 as *mut _, len26, len26);
                
                wit_bindgen::rt::string_lift(bytes26)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l27 = *((ptr22 + 4) as *const i32);
                let l28 = *((ptr22 + 8) as *const i32);
                let len29 = l28 as usize;
                let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                
                wit_bindgen::rt::string_lift(bytes29)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// listen on all or given selectors
      pub fn activate(selectors: Option<&[wit_bindgen::rt::string::String]>,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let mut cleanup_list = Vec::new();
          let (result2_0,result2_1,result2_2,) = match selectors {
            Some(e) => {
              let vec1 = e;
              let len1 = vec1.len() as i32;
              let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
              let result1 = if layout1.size() != 0
              {
                let ptr = alloc::alloc(layout1);
                if ptr.is_null()
                {
                  alloc::handle_alloc_error(layout1);
                }
                ptr
              }else {{
                ::core::ptr::null_mut()
              }};
              for (i, e) in vec1.into_iter().enumerate() {
                let base = result1 as i32 + (i as i32) * 8;
                {
                  let vec0 = e;
                  let ptr0 = vec0.as_ptr() as i32;
                  let len0 = vec0.len() as i32;
                  *((base + 4) as *mut i32) = len0;
                  *((base + 0) as *mut i32) = ptr0;
                }
              }
              cleanup_list.extend_from_slice(&[(result1, layout1),]);
              
              (1i32, result1 as i32, len1)
            },
            None => {
              (0i32, 0i32, 0i32)
            },
          };
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "delano:wit-ui/wurbo-out@0.1.0")]
          extern "C" {
            #[link_name = "activate"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result2_0, result2_1, result2_2);
          for (ptr, layout) in cleanup_list {
            
            if layout.size() != 0 {
              
              alloc::dealloc(ptr, layout);
              
            }
            
          }
        }
      }
      
    }
    
  }
}
pub mod peerpiper {
  pub mod wallet {
    
    #[allow(clippy::all)]
    pub mod wurbo_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type SeedContext = super::super::super::seed_keeper::wit_ui::wurbo_out::Context;
      pub type DelanoContext = super::super::super::delano::wit_ui::wurbo_out::Context;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct App {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for App {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("App").field("title", &self.title).finish()
        }
      }
      /// Content record for the initial content of the entire app
      #[derive(Clone)]
      pub struct Content {
        /// pass in props like title, etc.
        pub app: App,
        /// optionally pass in an encrypted seed to load
        pub seed_ui: SeedContext,
        pub delano_ui: DelanoContext,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("app", &self.app).field("seed-ui", &self.seed_ui).field("delano-ui", &self.delano_ui).finish()
        }
      }
      #[derive(Clone)]
      pub enum Message{
        Encrypted(wit_bindgen::rt::vec::Vec::<u8>),
      }
      impl ::core::fmt::Debug for Message {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Message::Encrypted(e) => {
              f.debug_tuple("Message::Encrypted").field(e).finish()
            }
          }
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Seed(SeedContext),
        Delano(DelanoContext),
        /// edwards(edwards-context)
        Event(Message),
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Seed(e) => {
              f.debug_tuple("Context::Seed").field(e).finish()
            }
            Context::Delano(e) => {
              f.debug_tuple("Context::Delano").field(e).finish()
            }
            Context::Event(e) => {
              f.debug_tuple("Context::Event").field(e).finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_in {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type ListenDetails = super::super::super::peerpiper::wallet::wurbo_types::ListenDetails;
      #[allow(unused_unsafe, clippy::all)]
      /// Add an event listener to the given element
      pub fn addeventlistener(details: &ListenDetails,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let super::super::super::peerpiper::wallet::wurbo_types::ListenDetails{ selector:selector0, ty:ty0, } = details;
          let vec1 = selector0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = ty0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "addeventlistener"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// set the location hash
      pub fn set_hash(hash: &str,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = hash;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "peerpiper:wallet/wurbo-in@0.1.0")]
          extern "C" {
            #[link_name = "set-hash"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0);
        }
      }
      
    }
    
  }
}
pub mod seed_keeper {
  pub mod wit_ui {
    
    #[allow(clippy::all)]
    pub mod wurbo_types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Details required in order to add an event listener to an element
      #[derive(Clone)]
      pub struct ListenDetails {
        pub selector: wit_bindgen::rt::string::String,
        pub ty: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for ListenDetails {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ListenDetails").field("selector", &self.selector).field("ty", &self.ty).finish()
        }
      }
      /// Context for the minijinja rendering
      #[derive(Clone)]
      pub struct Page {
        pub title: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Page {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Page").field("title", &self.title).finish()
        }
      }
      #[derive(Clone)]
      pub struct Input {
        pub placeholder: wit_bindgen::rt::string::String,
        pub username: Option<wit_bindgen::rt::string::String>,
        pub encrypted: Option<wit_bindgen::rt::vec::Vec::<u8>>,
      }
      impl ::core::fmt::Debug for Input {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Input").field("placeholder", &self.placeholder).field("username", &self.username).field("encrypted", &self.encrypted).finish()
        }
      }
      pub type Encrypted = wit_bindgen::rt::vec::Vec::<u8>;
      #[derive(Clone)]
      pub struct Output {
        /// the resulting value of the total outputs combined
        pub value: Option<wit_bindgen::rt::string::String>,
        /// optional id string: None is intial render, Some for update value
        pub id: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the username changes
        pub username: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the password changes
        pub password: Option<wit_bindgen::rt::string::String>,
        /// the output dest for the encrypted changes
        pub encrypted: Option<Encrypted>,
      }
      impl ::core::fmt::Debug for Output {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Output").field("value", &self.value).field("id", &self.id).field("username", &self.username).field("password", &self.password).field("encrypted", &self.encrypted).finish()
        }
      }
      /// Content for the entire page
      #[derive(Clone)]
      pub struct Content {
        pub page: Option<Page>,
        pub input: Option<Input>,
        pub output: Option<Output>,
      }
      impl ::core::fmt::Debug for Content {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Content").field("page", &self.page).field("input", &self.input).field("output", &self.output).finish()
        }
      }
      /// Context variants
      #[derive(Clone)]
      pub enum Context{
        AllContent(Content),
        Username(wit_bindgen::rt::string::String),
        Password(wit_bindgen::rt::string::String),
        Encrypted(Encrypted),
        Submit,
      }
      impl ::core::fmt::Debug for Context {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Context::AllContent(e) => {
              f.debug_tuple("Context::AllContent").field(e).finish()
            }
            Context::Username(e) => {
              f.debug_tuple("Context::Username").field(e).finish()
            }
            Context::Password(e) => {
              f.debug_tuple("Context::Password").field(e).finish()
            }
            Context::Encrypted(e) => {
              f.debug_tuple("Context::Encrypted").field(e).finish()
            }
            Context::Submit => {
              f.debug_tuple("Context::Submit").finish()
            }
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod wurbo_out {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Context = super::super::super::seed_keeper::wit_ui::wurbo_types::Context;
      #[allow(unused_unsafe, clippy::all)]
      /// renders the initial Web component with the given data
      /// and the target template to use as top level entry point
      pub fn render(ctx: &Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 116]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;use super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V17;
          match ctx {
            V17::AllContent(e) => {
              *((ptr0 + 0) as *mut u8) = (0i32) as u8;
              let super::super::super::seed_keeper::wit_ui::wurbo_types::Content{ page:page1, input:input1, output:output1, } = e;
              match page1 {
                Some(e) => {
                  *((ptr0 + 4) as *mut u8) = (1i32) as u8;
                  let super::super::super::seed_keeper::wit_ui::wurbo_types::Page{ title:title2, } = e;
                  let vec3 = title2;
                  let ptr3 = vec3.as_ptr() as i32;
                  let len3 = vec3.len() as i32;
                  *((ptr0 + 12) as *mut i32) = len3;
                  *((ptr0 + 8) as *mut i32) = ptr3;
                },
                None => {
                  {
                    *((ptr0 + 4) as *mut u8) = (0i32) as u8;
                  }
                },
              };match input1 {
                Some(e) => {
                  *((ptr0 + 16) as *mut u8) = (1i32) as u8;
                  let super::super::super::seed_keeper::wit_ui::wurbo_types::Input{ placeholder:placeholder4, username:username4, encrypted:encrypted4, } = e;
                  let vec5 = placeholder4;
                  let ptr5 = vec5.as_ptr() as i32;
                  let len5 = vec5.len() as i32;
                  *((ptr0 + 24) as *mut i32) = len5;
                  *((ptr0 + 20) as *mut i32) = ptr5;
                  match username4 {
                    Some(e) => {
                      *((ptr0 + 28) as *mut u8) = (1i32) as u8;
                      let vec6 = e;
                      let ptr6 = vec6.as_ptr() as i32;
                      let len6 = vec6.len() as i32;
                      *((ptr0 + 36) as *mut i32) = len6;
                      *((ptr0 + 32) as *mut i32) = ptr6;
                    },
                    None => {
                      {
                        *((ptr0 + 28) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };match encrypted4 {
                    Some(e) => {
                      *((ptr0 + 40) as *mut u8) = (1i32) as u8;
                      let vec7 = e;
                      let ptr7 = vec7.as_ptr() as i32;
                      let len7 = vec7.len() as i32;
                      *((ptr0 + 48) as *mut i32) = len7;
                      *((ptr0 + 44) as *mut i32) = ptr7;
                    },
                    None => {
                      {
                        *((ptr0 + 40) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };},
                  None => {
                    {
                      *((ptr0 + 16) as *mut u8) = (0i32) as u8;
                    }
                  },
                };match output1 {
                  Some(e) => {
                    *((ptr0 + 52) as *mut u8) = (1i32) as u8;
                    let super::super::super::seed_keeper::wit_ui::wurbo_types::Output{ value:value8, id:id8, username:username8, password:password8, encrypted:encrypted8, } = e;
                    match value8 {
                      Some(e) => {
                        *((ptr0 + 56) as *mut u8) = (1i32) as u8;
                        let vec9 = e;
                        let ptr9 = vec9.as_ptr() as i32;
                        let len9 = vec9.len() as i32;
                        *((ptr0 + 64) as *mut i32) = len9;
                        *((ptr0 + 60) as *mut i32) = ptr9;
                      },
                      None => {
                        {
                          *((ptr0 + 56) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };match id8 {
                      Some(e) => {
                        *((ptr0 + 68) as *mut u8) = (1i32) as u8;
                        let vec10 = e;
                        let ptr10 = vec10.as_ptr() as i32;
                        let len10 = vec10.len() as i32;
                        *((ptr0 + 76) as *mut i32) = len10;
                        *((ptr0 + 72) as *mut i32) = ptr10;
                      },
                      None => {
                        {
                          *((ptr0 + 68) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };match username8 {
                      Some(e) => {
                        *((ptr0 + 80) as *mut u8) = (1i32) as u8;
                        let vec11 = e;
                        let ptr11 = vec11.as_ptr() as i32;
                        let len11 = vec11.len() as i32;
                        *((ptr0 + 88) as *mut i32) = len11;
                        *((ptr0 + 84) as *mut i32) = ptr11;
                      },
                      None => {
                        {
                          *((ptr0 + 80) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };match password8 {
                      Some(e) => {
                        *((ptr0 + 92) as *mut u8) = (1i32) as u8;
                        let vec12 = e;
                        let ptr12 = vec12.as_ptr() as i32;
                        let len12 = vec12.len() as i32;
                        *((ptr0 + 100) as *mut i32) = len12;
                        *((ptr0 + 96) as *mut i32) = ptr12;
                      },
                      None => {
                        {
                          *((ptr0 + 92) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };match encrypted8 {
                      Some(e) => {
                        *((ptr0 + 104) as *mut u8) = (1i32) as u8;
                        let vec13 = e;
                        let ptr13 = vec13.as_ptr() as i32;
                        let len13 = vec13.len() as i32;
                        *((ptr0 + 112) as *mut i32) = len13;
                        *((ptr0 + 108) as *mut i32) = ptr13;
                      },
                      None => {
                        {
                          *((ptr0 + 104) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };},
                    None => {
                      {
                        *((ptr0 + 52) as *mut u8) = (0i32) as u8;
                      }
                    },
                  };},
                  V17::Username(e) => {
                    *((ptr0 + 0) as *mut u8) = (1i32) as u8;
                    let vec14 = e;
                    let ptr14 = vec14.as_ptr() as i32;
                    let len14 = vec14.len() as i32;
                    *((ptr0 + 8) as *mut i32) = len14;
                    *((ptr0 + 4) as *mut i32) = ptr14;
                  },
                  V17::Password(e) => {
                    *((ptr0 + 0) as *mut u8) = (2i32) as u8;
                    let vec15 = e;
                    let ptr15 = vec15.as_ptr() as i32;
                    let len15 = vec15.len() as i32;
                    *((ptr0 + 8) as *mut i32) = len15;
                    *((ptr0 + 4) as *mut i32) = ptr15;
                  },
                  V17::Encrypted(e) => {
                    *((ptr0 + 0) as *mut u8) = (3i32) as u8;
                    let vec16 = e;
                    let ptr16 = vec16.as_ptr() as i32;
                    let len16 = vec16.len() as i32;
                    *((ptr0 + 8) as *mut i32) = len16;
                    *((ptr0 + 4) as *mut i32) = ptr16;
                  },
                  V17::Submit=> {
                    {
                      *((ptr0 + 0) as *mut u8) = (4i32) as u8;
                    }
                  }
                }
                let ptr18 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
                extern "C" {
                  #[link_name = "render"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import(ptr0, ptr18);
                let l19 = i32::from(*((ptr18 + 0) as *const u8));
                match l19 {
                  0 => {
                    let e = {
                      let l20 = *((ptr18 + 4) as *const i32);
                      let l21 = *((ptr18 + 8) as *const i32);
                      let len22 = l21 as usize;
                      let bytes22 = Vec::from_raw_parts(l20 as *mut _, len22, len22);
                      
                      wit_bindgen::rt::string_lift(bytes22)
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l23 = *((ptr18 + 4) as *const i32);
                      let l24 = *((ptr18 + 8) as *const i32);
                      let len25 = l24 as usize;
                      let bytes25 = Vec::from_raw_parts(l23 as *mut _, len25, len25);
                      
                      wit_bindgen::rt::string_lift(bytes25)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// listen on all or given selectors
            pub fn activate(selectors: Option<&[wit_bindgen::rt::string::String]>,){
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                let mut cleanup_list = Vec::new();
                let (result2_0,result2_1,result2_2,) = match selectors {
                  Some(e) => {
                    let vec1 = e;
                    let len1 = vec1.len() as i32;
                    let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 8, 4);
                    let result1 = if layout1.size() != 0
                    {
                      let ptr = alloc::alloc(layout1);
                      if ptr.is_null()
                      {
                        alloc::handle_alloc_error(layout1);
                      }
                      ptr
                    }else {{
                      ::core::ptr::null_mut()
                    }};
                    for (i, e) in vec1.into_iter().enumerate() {
                      let base = result1 as i32 + (i as i32) * 8;
                      {
                        let vec0 = e;
                        let ptr0 = vec0.as_ptr() as i32;
                        let len0 = vec0.len() as i32;
                        *((base + 4) as *mut i32) = len0;
                        *((base + 0) as *mut i32) = ptr0;
                      }
                    }
                    cleanup_list.extend_from_slice(&[(result1, layout1),]);
                    
                    (1i32, result1 as i32, len1)
                  },
                  None => {
                    (0i32, 0i32, 0i32)
                  },
                };
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "seed-keeper:wit-ui/wurbo-out@0.1.0")]
                extern "C" {
                  #[link_name = "activate"]
                  fn wit_import(_: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import(result2_0, result2_1, result2_2);
                for (ptr, layout) in cleanup_list {
                  
                  if layout.size() != 0 {
                    
                    alloc::dealloc(ptr, layout);
                    
                  }
                  
                }
              }
            }
            
          }
          
        }
      }
      pub mod exports {
        pub mod peerpiper {
          pub mod wallet {
            
            #[allow(clippy::all)]
            pub mod wurbo_out {
              #[used]
              #[doc(hidden)]
              #[cfg(target_arch = "wasm32")]
              static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
              pub type Context = super::super::super::super::peerpiper::wallet::wurbo_types::Context;
              const _: () = {
                
                #[doc(hidden)]
                #[export_name = "peerpiper:wallet/wurbo-out@0.1.0#render"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __export_render(arg0: i32,) -> i32 {
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  
                  // Before executing any other code, use this function to run all static
                  // constructors, if they have not yet been run. This is a hack required
                  // to work around wasi-libc ctors calling import functions to initialize
                  // the environment.
                  //
                  // This functionality will be removed once rust 1.69.0 is stable, at which
                  // point wasi-libc will no longer have this behavior.
                  //
                  // See
                  // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                  // for more details.
                  #[cfg(target_arch="wasm32")]
                  wit_bindgen::rt::run_ctors_once();
                  
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  use super::super::super::super::peerpiper::wallet::wurbo_types::Context as V187;
                  let v187 = match l0 {
                    0 => {
                      let e187 = {
                        let l1 = *((arg0 + 4) as *const i32);
                        let l2 = *((arg0 + 8) as *const i32);
                        let len3 = l2 as usize;
                        let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                        let l4 = i32::from(*((arg0 + 12) as *const u8));
                        use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V51;
                        let v51 = match l4 {
                          0 => {
                            let e51 = {
                              let l5 = i32::from(*((arg0 + 16) as *const u8));
                              let l9 = i32::from(*((arg0 + 28) as *const u8));
                              let l21 = i32::from(*((arg0 + 64) as *const u8));
                              
                              super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                                page: match l5 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l6 = *((arg0 + 20) as *const i32);
                                      let l7 = *((arg0 + 24) as *const i32);
                                      let len8 = l7 as usize;
                                      let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                                      
                                      super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                                        title: wit_bindgen::rt::string_lift(bytes8),
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                input: match l9 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l10 = *((arg0 + 32) as *const i32);
                                      let l11 = *((arg0 + 36) as *const i32);
                                      let len12 = l11 as usize;
                                      let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                      let l13 = i32::from(*((arg0 + 40) as *const u8));
                                      let l17 = i32::from(*((arg0 + 52) as *const u8));
                                      
                                      super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                                        placeholder: wit_bindgen::rt::string_lift(bytes12),
                                        username: match l13 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l14 = *((arg0 + 44) as *const i32);
                                              let l15 = *((arg0 + 48) as *const i32);
                                              let len16 = l15 as usize;
                                              let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                                              
                                              wit_bindgen::rt::string_lift(bytes16)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        encrypted: match l17 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l18 = *((arg0 + 56) as *const i32);
                                              let l19 = *((arg0 + 60) as *const i32);
                                              let len20 = l19 as usize;
                                              
                                              Vec::from_raw_parts(l18 as *mut _, len20, len20)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                output: match l21 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l22 = i32::from(*((arg0 + 68) as *const u8));
                                      let l26 = i32::from(*((arg0 + 80) as *const u8));
                                      let l30 = i32::from(*((arg0 + 92) as *const u8));
                                      let l34 = i32::from(*((arg0 + 104) as *const u8));
                                      let l38 = i32::from(*((arg0 + 116) as *const u8));
                                      
                                      super::super::super::super::seed_keeper::wit_ui::wurbo_types::Output{
                                        value: match l22 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l23 = *((arg0 + 72) as *const i32);
                                              let l24 = *((arg0 + 76) as *const i32);
                                              let len25 = l24 as usize;
                                              let bytes25 = Vec::from_raw_parts(l23 as *mut _, len25, len25);
                                              
                                              wit_bindgen::rt::string_lift(bytes25)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        id: match l26 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l27 = *((arg0 + 84) as *const i32);
                                              let l28 = *((arg0 + 88) as *const i32);
                                              let len29 = l28 as usize;
                                              let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                                              
                                              wit_bindgen::rt::string_lift(bytes29)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        username: match l30 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l31 = *((arg0 + 96) as *const i32);
                                              let l32 = *((arg0 + 100) as *const i32);
                                              let len33 = l32 as usize;
                                              let bytes33 = Vec::from_raw_parts(l31 as *mut _, len33, len33);
                                              
                                              wit_bindgen::rt::string_lift(bytes33)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        password: match l34 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l35 = *((arg0 + 108) as *const i32);
                                              let l36 = *((arg0 + 112) as *const i32);
                                              let len37 = l36 as usize;
                                              let bytes37 = Vec::from_raw_parts(l35 as *mut _, len37, len37);
                                              
                                              wit_bindgen::rt::string_lift(bytes37)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        encrypted: match l38 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l39 = *((arg0 + 120) as *const i32);
                                              let l40 = *((arg0 + 124) as *const i32);
                                              let len41 = l40 as usize;
                                              
                                              Vec::from_raw_parts(l39 as *mut _, len41, len41)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                              }
                            };
                            V51::AllContent(e51)
                          }
                          1 => {
                            let e51 = {
                              let l42 = *((arg0 + 16) as *const i32);
                              let l43 = *((arg0 + 20) as *const i32);
                              let len44 = l43 as usize;
                              let bytes44 = Vec::from_raw_parts(l42 as *mut _, len44, len44);
                              
                              wit_bindgen::rt::string_lift(bytes44)
                            };
                            V51::Username(e51)
                          }
                          2 => {
                            let e51 = {
                              let l45 = *((arg0 + 16) as *const i32);
                              let l46 = *((arg0 + 20) as *const i32);
                              let len47 = l46 as usize;
                              let bytes47 = Vec::from_raw_parts(l45 as *mut _, len47, len47);
                              
                              wit_bindgen::rt::string_lift(bytes47)
                            };
                            V51::Password(e51)
                          }
                          3 => {
                            let e51 = {
                              let l48 = *((arg0 + 16) as *const i32);
                              let l49 = *((arg0 + 20) as *const i32);
                              let len50 = l49 as usize;
                              
                              Vec::from_raw_parts(l48 as *mut _, len50, len50)
                            };
                            V51::Encrypted(e51)
                          }
                          n => {
                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                            V51::Submit
                          }
                        };
                        let l52 = i32::from(*((arg0 + 128) as *const u8));
                        use super::super::super::super::delano::wit_ui::context_types::Context as V92;
                        let v92 = match l52 {
                          0 => {
                            let e92 = {
                              let l53 = i32::from(*((arg0 + 132) as *const u8));
                              let l63 = i32::from(*((arg0 + 160) as *const u8));
                              let l77 = i32::from(*((arg0 + 176) as *const u8));
                              
                              super::super::super::super::delano::wit_ui::context_types::Everything{
                                page: match l53 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l54 = *((arg0 + 136) as *const i32);
                                      let l55 = *((arg0 + 140) as *const i32);
                                      let len56 = l55 as usize;
                                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                                      let l57 = *((arg0 + 144) as *const i32);
                                      let l58 = *((arg0 + 148) as *const i32);
                                      let len59 = l58 as usize;
                                      let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                      let l60 = *((arg0 + 152) as *const i32);
                                      let l61 = *((arg0 + 156) as *const i32);
                                      let len62 = l61 as usize;
                                      let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                      
                                      super::super::super::super::delano::wit_ui::context_types::Page{
                                        name: wit_bindgen::rt::string_lift(bytes56),
                                        version: wit_bindgen::rt::string_lift(bytes59),
                                        description: wit_bindgen::rt::string_lift(bytes62),
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                issue: match l63 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l64 = *((arg0 + 164) as *const i32);
                                      let l65 = *((arg0 + 168) as *const i32);
                                      let base75 = l64;
                                      let len75 = l65;
                                      let mut result75 = Vec::with_capacity(len75 as usize);
                                      for i in 0..len75 {
                                        let base = base75 + i * 24;
                                        let e75 = {
                                          let l66 = *((base + 0) as *const i32);
                                          let l67 = *((base + 4) as *const i32);
                                          let len68 = l67 as usize;
                                          let bytes68 = Vec::from_raw_parts(l66 as *mut _, len68, len68);
                                          let l69 = *((base + 8) as *const i32);
                                          let l70 = *((base + 12) as *const i32);
                                          let len71 = l70 as usize;
                                          let bytes71 = Vec::from_raw_parts(l69 as *mut _, len71, len71);
                                          let l72 = *((base + 16) as *const i32);
                                          let l73 = *((base + 20) as *const i32);
                                          let len74 = l73 as usize;
                                          let bytes74 = Vec::from_raw_parts(l72 as *mut _, len74, len74);
                                          
                                          super::super::super::super::delano::wit_ui::context_types::Kov{
                                            key: wit_bindgen::rt::string_lift(bytes68),
                                            op: wit_bindgen::rt::string_lift(bytes71),
                                            value: wit_bindgen::rt::string_lift(bytes74),
                                          }
                                        };
                                        result75.push(e75);
                                      }
                                      wit_bindgen::rt::dealloc(base75, (len75 as usize) * 24, 4);
                                      let l76 = i32::from(*((arg0 + 172) as *const u8));
                                      
                                      super::super::super::super::delano::wit_ui::context_types::Issuer{
                                        attributes: result75,
                                        max_entries: l76 as u8,
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                load: match l77 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l78 = *((arg0 + 180) as *const i32);
                                      let l79 = *((arg0 + 184) as *const i32);
                                      let len80 = l79 as usize;
                                      let bytes80 = Vec::from_raw_parts(l78 as *mut _, len80, len80);
                                      
                                      wit_bindgen::rt::string_lift(bytes80)
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                              }
                            };
                            V92::AllContent(e92)
                          }
                          1 => {
                            V92::Addattribute
                          }
                          2 => {
                            V92::Newentry
                          }
                          3 => {
                            let e92 = {
                              let l81 = *((arg0 + 132) as *const i32);
                              let l82 = i32::from(*((arg0 + 136) as *const u8));
                              use super::super::super::super::delano::wit_ui::context_types::Kovindex as V87;
                              let v87 = match l82 {
                                0 => {
                                  let e87 = {
                                    let l83 = *((arg0 + 140) as *const i32);
                                    
                                    l83 as u32
                                  };
                                  V87::Key(e87)
                                }
                                1 => {
                                  let e87 = {
                                    let l84 = *((arg0 + 140) as *const i32);
                                    
                                    l84 as u32
                                  };
                                  V87::Op(e87)
                                }
                                2 => {
                                  let e87 = {
                                    let l85 = *((arg0 + 140) as *const i32);
                                    
                                    l85 as u32
                                  };
                                  V87::Value(e87)
                                }
                                n => {
                                  debug_assert_eq!(n, 3, "invalid enum discriminant");
                                  let e87 = {
                                    let l86 = *((arg0 + 140) as *const i32);
                                    
                                    l86 as u32
                                  };
                                  V87::Selected(e87)
                                }
                              };
                              let l88 = *((arg0 + 144) as *const i32);
                              let l89 = *((arg0 + 148) as *const i32);
                              let len90 = l89 as usize;
                              let bytes90 = Vec::from_raw_parts(l88 as *mut _, len90, len90);
                              
                              super::super::super::super::delano::wit_ui::context_types::Kvctx{
                                ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                                  idx: l81 as u32,
                                  val: v87,
                                },
                                value: wit_bindgen::rt::string_lift(bytes90),
                              }
                            };
                            V92::Editattribute(e92)
                          }
                          n => {
                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                            let e92 = {
                              let l91 = i32::from(*((arg0 + 132) as *const u8));
                              
                              l91 as u8
                            };
                            V92::Editmaxentries(e92)
                          }
                        };
                        
                        super::super::super::super::peerpiper::wallet::wurbo_types::Content{
                          app: super::super::super::super::peerpiper::wallet::wurbo_types::App{
                            title: wit_bindgen::rt::string_lift(bytes3),
                          },
                          seed_ui: v51,
                          delano_ui: v92,
                        }
                      };
                      V187::AllContent(e187)
                    }
                    1 => {
                      let e187 = {
                        let l93 = i32::from(*((arg0 + 4) as *const u8));
                        use super::super::super::super::seed_keeper::wit_ui::wurbo_types::Context as V140;
                        let v140 = match l93 {
                          0 => {
                            let e140 = {
                              let l94 = i32::from(*((arg0 + 8) as *const u8));
                              let l98 = i32::from(*((arg0 + 20) as *const u8));
                              let l110 = i32::from(*((arg0 + 56) as *const u8));
                              
                              super::super::super::super::seed_keeper::wit_ui::wurbo_types::Content{
                                page: match l94 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l95 = *((arg0 + 12) as *const i32);
                                      let l96 = *((arg0 + 16) as *const i32);
                                      let len97 = l96 as usize;
                                      let bytes97 = Vec::from_raw_parts(l95 as *mut _, len97, len97);
                                      
                                      super::super::super::super::seed_keeper::wit_ui::wurbo_types::Page{
                                        title: wit_bindgen::rt::string_lift(bytes97),
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                input: match l98 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l99 = *((arg0 + 24) as *const i32);
                                      let l100 = *((arg0 + 28) as *const i32);
                                      let len101 = l100 as usize;
                                      let bytes101 = Vec::from_raw_parts(l99 as *mut _, len101, len101);
                                      let l102 = i32::from(*((arg0 + 32) as *const u8));
                                      let l106 = i32::from(*((arg0 + 44) as *const u8));
                                      
                                      super::super::super::super::seed_keeper::wit_ui::wurbo_types::Input{
                                        placeholder: wit_bindgen::rt::string_lift(bytes101),
                                        username: match l102 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l103 = *((arg0 + 36) as *const i32);
                                              let l104 = *((arg0 + 40) as *const i32);
                                              let len105 = l104 as usize;
                                              let bytes105 = Vec::from_raw_parts(l103 as *mut _, len105, len105);
                                              
                                              wit_bindgen::rt::string_lift(bytes105)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        encrypted: match l106 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l107 = *((arg0 + 48) as *const i32);
                                              let l108 = *((arg0 + 52) as *const i32);
                                              let len109 = l108 as usize;
                                              
                                              Vec::from_raw_parts(l107 as *mut _, len109, len109)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                output: match l110 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l111 = i32::from(*((arg0 + 60) as *const u8));
                                      let l115 = i32::from(*((arg0 + 72) as *const u8));
                                      let l119 = i32::from(*((arg0 + 84) as *const u8));
                                      let l123 = i32::from(*((arg0 + 96) as *const u8));
                                      let l127 = i32::from(*((arg0 + 108) as *const u8));
                                      
                                      super::super::super::super::seed_keeper::wit_ui::wurbo_types::Output{
                                        value: match l111 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l112 = *((arg0 + 64) as *const i32);
                                              let l113 = *((arg0 + 68) as *const i32);
                                              let len114 = l113 as usize;
                                              let bytes114 = Vec::from_raw_parts(l112 as *mut _, len114, len114);
                                              
                                              wit_bindgen::rt::string_lift(bytes114)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        id: match l115 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l116 = *((arg0 + 76) as *const i32);
                                              let l117 = *((arg0 + 80) as *const i32);
                                              let len118 = l117 as usize;
                                              let bytes118 = Vec::from_raw_parts(l116 as *mut _, len118, len118);
                                              
                                              wit_bindgen::rt::string_lift(bytes118)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        username: match l119 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l120 = *((arg0 + 88) as *const i32);
                                              let l121 = *((arg0 + 92) as *const i32);
                                              let len122 = l121 as usize;
                                              let bytes122 = Vec::from_raw_parts(l120 as *mut _, len122, len122);
                                              
                                              wit_bindgen::rt::string_lift(bytes122)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        password: match l123 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l124 = *((arg0 + 100) as *const i32);
                                              let l125 = *((arg0 + 104) as *const i32);
                                              let len126 = l125 as usize;
                                              let bytes126 = Vec::from_raw_parts(l124 as *mut _, len126, len126);
                                              
                                              wit_bindgen::rt::string_lift(bytes126)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                        encrypted: match l127 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l128 = *((arg0 + 112) as *const i32);
                                              let l129 = *((arg0 + 116) as *const i32);
                                              let len130 = l129 as usize;
                                              
                                              Vec::from_raw_parts(l128 as *mut _, len130, len130)
                                            };
                                            Some(e)
                                          }
                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                        },
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                              }
                            };
                            V140::AllContent(e140)
                          }
                          1 => {
                            let e140 = {
                              let l131 = *((arg0 + 8) as *const i32);
                              let l132 = *((arg0 + 12) as *const i32);
                              let len133 = l132 as usize;
                              let bytes133 = Vec::from_raw_parts(l131 as *mut _, len133, len133);
                              
                              wit_bindgen::rt::string_lift(bytes133)
                            };
                            V140::Username(e140)
                          }
                          2 => {
                            let e140 = {
                              let l134 = *((arg0 + 8) as *const i32);
                              let l135 = *((arg0 + 12) as *const i32);
                              let len136 = l135 as usize;
                              let bytes136 = Vec::from_raw_parts(l134 as *mut _, len136, len136);
                              
                              wit_bindgen::rt::string_lift(bytes136)
                            };
                            V140::Password(e140)
                          }
                          3 => {
                            let e140 = {
                              let l137 = *((arg0 + 8) as *const i32);
                              let l138 = *((arg0 + 12) as *const i32);
                              let len139 = l138 as usize;
                              
                              Vec::from_raw_parts(l137 as *mut _, len139, len139)
                            };
                            V140::Encrypted(e140)
                          }
                          n => {
                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                            V140::Submit
                          }
                        };
                        
                        v140
                      };
                      V187::Seed(e187)
                    }
                    2 => {
                      let e187 = {
                        let l141 = i32::from(*((arg0 + 4) as *const u8));
                        use super::super::super::super::delano::wit_ui::context_types::Context as V181;
                        let v181 = match l141 {
                          0 => {
                            let e181 = {
                              let l142 = i32::from(*((arg0 + 8) as *const u8));
                              let l152 = i32::from(*((arg0 + 36) as *const u8));
                              let l166 = i32::from(*((arg0 + 52) as *const u8));
                              
                              super::super::super::super::delano::wit_ui::context_types::Everything{
                                page: match l142 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l143 = *((arg0 + 12) as *const i32);
                                      let l144 = *((arg0 + 16) as *const i32);
                                      let len145 = l144 as usize;
                                      let bytes145 = Vec::from_raw_parts(l143 as *mut _, len145, len145);
                                      let l146 = *((arg0 + 20) as *const i32);
                                      let l147 = *((arg0 + 24) as *const i32);
                                      let len148 = l147 as usize;
                                      let bytes148 = Vec::from_raw_parts(l146 as *mut _, len148, len148);
                                      let l149 = *((arg0 + 28) as *const i32);
                                      let l150 = *((arg0 + 32) as *const i32);
                                      let len151 = l150 as usize;
                                      let bytes151 = Vec::from_raw_parts(l149 as *mut _, len151, len151);
                                      
                                      super::super::super::super::delano::wit_ui::context_types::Page{
                                        name: wit_bindgen::rt::string_lift(bytes145),
                                        version: wit_bindgen::rt::string_lift(bytes148),
                                        description: wit_bindgen::rt::string_lift(bytes151),
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                issue: match l152 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l153 = *((arg0 + 40) as *const i32);
                                      let l154 = *((arg0 + 44) as *const i32);
                                      let base164 = l153;
                                      let len164 = l154;
                                      let mut result164 = Vec::with_capacity(len164 as usize);
                                      for i in 0..len164 {
                                        let base = base164 + i * 24;
                                        let e164 = {
                                          let l155 = *((base + 0) as *const i32);
                                          let l156 = *((base + 4) as *const i32);
                                          let len157 = l156 as usize;
                                          let bytes157 = Vec::from_raw_parts(l155 as *mut _, len157, len157);
                                          let l158 = *((base + 8) as *const i32);
                                          let l159 = *((base + 12) as *const i32);
                                          let len160 = l159 as usize;
                                          let bytes160 = Vec::from_raw_parts(l158 as *mut _, len160, len160);
                                          let l161 = *((base + 16) as *const i32);
                                          let l162 = *((base + 20) as *const i32);
                                          let len163 = l162 as usize;
                                          let bytes163 = Vec::from_raw_parts(l161 as *mut _, len163, len163);
                                          
                                          super::super::super::super::delano::wit_ui::context_types::Kov{
                                            key: wit_bindgen::rt::string_lift(bytes157),
                                            op: wit_bindgen::rt::string_lift(bytes160),
                                            value: wit_bindgen::rt::string_lift(bytes163),
                                          }
                                        };
                                        result164.push(e164);
                                      }
                                      wit_bindgen::rt::dealloc(base164, (len164 as usize) * 24, 4);
                                      let l165 = i32::from(*((arg0 + 48) as *const u8));
                                      
                                      super::super::super::super::delano::wit_ui::context_types::Issuer{
                                        attributes: result164,
                                        max_entries: l165 as u8,
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                                load: match l166 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l167 = *((arg0 + 56) as *const i32);
                                      let l168 = *((arg0 + 60) as *const i32);
                                      let len169 = l168 as usize;
                                      let bytes169 = Vec::from_raw_parts(l167 as *mut _, len169, len169);
                                      
                                      wit_bindgen::rt::string_lift(bytes169)
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                },
                              }
                            };
                            V181::AllContent(e181)
                          }
                          1 => {
                            V181::Addattribute
                          }
                          2 => {
                            V181::Newentry
                          }
                          3 => {
                            let e181 = {
                              let l170 = *((arg0 + 8) as *const i32);
                              let l171 = i32::from(*((arg0 + 12) as *const u8));
                              use super::super::super::super::delano::wit_ui::context_types::Kovindex as V176;
                              let v176 = match l171 {
                                0 => {
                                  let e176 = {
                                    let l172 = *((arg0 + 16) as *const i32);
                                    
                                    l172 as u32
                                  };
                                  V176::Key(e176)
                                }
                                1 => {
                                  let e176 = {
                                    let l173 = *((arg0 + 16) as *const i32);
                                    
                                    l173 as u32
                                  };
                                  V176::Op(e176)
                                }
                                2 => {
                                  let e176 = {
                                    let l174 = *((arg0 + 16) as *const i32);
                                    
                                    l174 as u32
                                  };
                                  V176::Value(e176)
                                }
                                n => {
                                  debug_assert_eq!(n, 3, "invalid enum discriminant");
                                  let e176 = {
                                    let l175 = *((arg0 + 16) as *const i32);
                                    
                                    l175 as u32
                                  };
                                  V176::Selected(e176)
                                }
                              };
                              let l177 = *((arg0 + 20) as *const i32);
                              let l178 = *((arg0 + 24) as *const i32);
                              let len179 = l178 as usize;
                              let bytes179 = Vec::from_raw_parts(l177 as *mut _, len179, len179);
                              
                              super::super::super::super::delano::wit_ui::context_types::Kvctx{
                                ctx: super::super::super::super::delano::wit_ui::context_types::Entry{
                                  idx: l170 as u32,
                                  val: v176,
                                },
                                value: wit_bindgen::rt::string_lift(bytes179),
                              }
                            };
                            V181::Editattribute(e181)
                          }
                          n => {
                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                            let e181 = {
                              let l180 = i32::from(*((arg0 + 8) as *const u8));
                              
                              l180 as u8
                            };
                            V181::Editmaxentries(e181)
                          }
                        };
                        
                        v181
                      };
                      V187::Delano(e187)
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e187 = {
                        let l182 = i32::from(*((arg0 + 4) as *const u8));
                        use super::super::super::super::peerpiper::wallet::wurbo_types::Message as V186;
                        let v186 = match l182 {
                          n => {
                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                            let e186 = {
                              let l183 = *((arg0 + 8) as *const i32);
                              let l184 = *((arg0 + 12) as *const i32);
                              let len185 = l184 as usize;
                              
                              Vec::from_raw_parts(l183 as *mut _, len185, len185)
                            };
                            V186::Encrypted(e186)
                          }
                        };
                        
                        v186
                      };
                      V187::Event(e187)
                    }
                  };
                  let result188 = <_GuestImpl as Guest>::render(v187);
                  wit_bindgen::rt::dealloc(arg0, 188, 4);
                  let ptr189 = _RET_AREA.0.as_mut_ptr() as i32;
                  match result188 {
                    Ok(e) => { {
                      *((ptr189 + 0) as *mut u8) = (0i32) as u8;
                      let vec190 = (e.into_bytes()).into_boxed_slice();
                      let ptr190 = vec190.as_ptr() as i32;
                      let len190 = vec190.len() as i32;
                      ::core::mem::forget(vec190);
                      *((ptr189 + 8) as *mut i32) = len190;
                      *((ptr189 + 4) as *mut i32) = ptr190;
                    } },
                    Err(e) => { {
                      *((ptr189 + 0) as *mut u8) = (1i32) as u8;
                      let vec191 = (e.into_bytes()).into_boxed_slice();
                      let ptr191 = vec191.as_ptr() as i32;
                      let len191 = vec191.len() as i32;
                      ::core::mem::forget(vec191);
                      *((ptr189 + 8) as *mut i32) = len191;
                      *((ptr189 + 4) as *mut i32) = ptr191;
                    } },
                  };ptr189
                }
                
                const _: () = {
                  #[doc(hidden)]
                  #[export_name = "cabi_post_peerpiper:wallet/wurbo-out@0.1.0#render"]
                  #[allow(non_snake_case)]
                  unsafe extern "C" fn __post_return_render(arg0: i32,) {
                    let l0 = i32::from(*((arg0 + 0) as *const u8));
                    match l0 {
                      0 => {
                        let l1 = *((arg0 + 4) as *const i32);
                        let l2 = *((arg0 + 8) as *const i32);
                        wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                      },
                      _ => {
                        let l3 = *((arg0 + 4) as *const i32);
                        let l4 = *((arg0 + 8) as *const i32);
                        wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                      },
                    }
                  }
                };
              };
              const _: () = {
                
                #[doc(hidden)]
                #[export_name = "peerpiper:wallet/wurbo-out@0.1.0#activate"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __export_activate() {
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  
                  // Before executing any other code, use this function to run all static
                  // constructors, if they have not yet been run. This is a hack required
                  // to work around wasi-libc ctors calling import functions to initialize
                  // the environment.
                  //
                  // This functionality will be removed once rust 1.69.0 is stable, at which
                  // point wasi-libc will no longer have this behavior.
                  //
                  // See
                  // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                  // for more details.
                  #[cfg(target_arch="wasm32")]
                  wit_bindgen::rt::run_ctors_once();
                  
                  <_GuestImpl as Guest>::activate();
                }
              };
              use super::super::super::super::super::Component as _GuestImpl;
              pub trait Guest {
                /// renders the initial Web component with the given data
                fn render(ctx: Context,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
                /// activate listening
                fn activate();
              }
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              
              #[repr(align(4))]
              struct _RetArea([u8; 12]);
              static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
              
            }
            
            
            #[allow(clippy::all)]
            pub mod aggregation {
              #[used]
              #[doc(hidden)]
              #[cfg(target_arch = "wasm32")]
              static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
              const _: () = {
                
                #[doc(hidden)]
                #[export_name = "peerpiper:wallet/aggregation@0.1.0#activates"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __export_activates(arg0: i32,arg1: i32,arg2: i32,) {
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  
                  // Before executing any other code, use this function to run all static
                  // constructors, if they have not yet been run. This is a hack required
                  // to work around wasi-libc ctors calling import functions to initialize
                  // the environment.
                  //
                  // This functionality will be removed once rust 1.69.0 is stable, at which
                  // point wasi-libc will no longer have this behavior.
                  //
                  // See
                  // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                  // for more details.
                  #[cfg(target_arch="wasm32")]
                  wit_bindgen::rt::run_ctors_once();
                  
                  <_GuestImpl as Guest>::activates(match arg0 {
                    0 => None,
                    1 => {
                      let e = {
                        let base3 = arg1;
                        let len3 = arg2;
                        let mut result3 = Vec::with_capacity(len3 as usize);
                        for i in 0..len3 {
                          let base = base3 + i * 8;
                          let e3 = {
                            let l0 = *((base + 0) as *const i32);
                            let l1 = *((base + 4) as *const i32);
                            let len2 = l1 as usize;
                            let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                            
                            wit_bindgen::rt::string_lift(bytes2)
                          };
                          result3.push(e3);
                        }
                        wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
                        
                        result3
                      };
                      Some(e)
                    }
                    _ => wit_bindgen::rt::invalid_enum_discriminant(),
                  });
                }
              };
              use super::super::super::super::super::Component as _GuestImpl;
              pub trait Guest {
                /// calls activate on on the child components
                fn activates(selectors: Option<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>>,);
              }
              
            }
            
          }
        }
      }
      
      #[cfg(target_arch = "wasm32")]
      #[link_section = "component-type:peerpiper"]
      #[doc(hidden)]
      pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 7144] = [3, 0, 9, 112, 101, 101, 114, 112, 105, 112, 101, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 157, 10, 1, 65, 14, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 31, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 114, 3, 3, 107, 101, 121, 115, 2, 111, 112, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 107, 111, 118, 3, 0, 2, 1, 112, 3, 1, 114, 2, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 4, 11, 109, 97, 120, 45, 101, 110, 116, 114, 105, 101, 115, 125, 4, 0, 6, 105, 115, 115, 117, 101, 114, 3, 0, 5, 1, 112, 125, 1, 112, 4, 1, 107, 8, 1, 114, 2, 4, 99, 114, 101, 100, 7, 5, 104, 105, 110, 116, 115, 9, 4, 0, 5, 111, 102, 102, 101, 114, 3, 0, 10, 1, 112, 7, 1, 112, 12, 1, 114, 3, 5, 112, 114, 111, 111, 102, 7, 8, 115, 101, 108, 101, 99, 116, 101, 100, 13, 9, 112, 114, 101, 105, 109, 97, 103, 101, 115, 8, 4, 0, 5, 112, 114, 111, 111, 102, 3, 0, 14, 1, 107, 1, 1, 107, 6, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 16, 5, 105, 115, 115, 117, 101, 17, 4, 108, 111, 97, 100, 18, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 19, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 21, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 23, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 24, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 25, 1, 114, 2, 3, 99, 116, 120, 26, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 27, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 20, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 28, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 29, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 15, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 112, 125, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 11, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 12, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 4, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 11, 17, 1, 0, 11, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 3, 0, 0, 7, 81, 1, 65, 2, 1, 66, 4, 1, 112, 115, 1, 107, 0, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 1, 1, 0, 4, 0, 9, 97, 99, 116, 105, 118, 97, 116, 101, 115, 1, 2, 4, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 64, 48, 46, 49, 46, 48, 5, 0, 11, 17, 1, 0, 11, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 3, 2, 0, 7, 171, 11, 1, 65, 17, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 31, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 114, 3, 3, 107, 101, 121, 115, 2, 111, 112, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 107, 111, 118, 3, 0, 2, 1, 112, 3, 1, 114, 2, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 4, 11, 109, 97, 120, 45, 101, 110, 116, 114, 105, 101, 115, 125, 4, 0, 6, 105, 115, 115, 117, 101, 114, 3, 0, 5, 1, 112, 125, 1, 112, 4, 1, 107, 8, 1, 114, 2, 4, 99, 114, 101, 100, 7, 5, 104, 105, 110, 116, 115, 9, 4, 0, 5, 111, 102, 102, 101, 114, 3, 0, 10, 1, 112, 7, 1, 112, 12, 1, 114, 3, 5, 112, 114, 111, 111, 102, 7, 8, 115, 101, 108, 101, 99, 116, 101, 100, 13, 9, 112, 114, 101, 105, 109, 97, 103, 101, 115, 8, 4, 0, 5, 112, 114, 111, 111, 102, 3, 0, 14, 1, 107, 1, 1, 107, 6, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 16, 5, 105, 115, 115, 117, 101, 17, 4, 108, 111, 97, 100, 18, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 19, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 21, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 23, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 24, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 25, 1, 114, 2, 3, 99, 116, 120, 26, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 27, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 20, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 28, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 29, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 15, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 112, 125, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 11, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 12, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 6, 2, 3, 2, 1, 9, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 1, 64, 1, 4, 104, 97, 115, 104, 115, 1, 0, 4, 0, 8, 115, 101, 116, 45, 104, 97, 115, 104, 1, 3, 4, 1, 31, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 10, 11, 14, 1, 0, 8, 119, 117, 114, 98, 111, 45, 105, 110, 3, 4, 0, 7, 144, 11, 1, 65, 17, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 31, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 114, 3, 3, 107, 101, 121, 115, 2, 111, 112, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 107, 111, 118, 3, 0, 2, 1, 112, 3, 1, 114, 2, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 4, 11, 109, 97, 120, 45, 101, 110, 116, 114, 105, 101, 115, 125, 4, 0, 6, 105, 115, 115, 117, 101, 114, 3, 0, 5, 1, 112, 125, 1, 112, 4, 1, 107, 8, 1, 114, 2, 4, 99, 114, 101, 100, 7, 5, 104, 105, 110, 116, 115, 9, 4, 0, 5, 111, 102, 102, 101, 114, 3, 0, 10, 1, 112, 7, 1, 112, 12, 1, 114, 3, 5, 112, 114, 111, 111, 102, 7, 8, 115, 101, 108, 101, 99, 116, 101, 100, 13, 9, 112, 114, 101, 105, 109, 97, 103, 101, 115, 8, 4, 0, 5, 112, 114, 111, 111, 102, 3, 0, 14, 1, 107, 1, 1, 107, 6, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 16, 5, 105, 115, 115, 117, 101, 17, 4, 108, 111, 97, 100, 18, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 19, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 21, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 23, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 24, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 25, 1, 114, 2, 3, 99, 116, 120, 26, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 27, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 20, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 28, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 29, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 2, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 15, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 112, 125, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 11, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 12, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 7, 2, 3, 2, 1, 9, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 64, 0, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 4, 4, 1, 32, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 10, 11, 15, 1, 0, 9, 119, 117, 114, 98, 111, 45, 111, 117, 116, 3, 6, 0, 7, 144, 14, 1, 65, 2, 1, 65, 22, 1, 66, 21, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 2, 1, 107, 115, 1, 112, 125, 1, 107, 5, 1, 114, 3, 11, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 115, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 6, 4, 0, 5, 105, 110, 112, 117, 116, 3, 0, 7, 1, 112, 125, 4, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 3, 0, 9, 1, 107, 10, 1, 114, 5, 5, 118, 97, 108, 117, 101, 4, 2, 105, 100, 4, 8, 117, 115, 101, 114, 110, 97, 109, 101, 4, 8, 112, 97, 115, 115, 119, 111, 114, 100, 4, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 11, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 12, 1, 107, 3, 1, 107, 8, 1, 107, 13, 1, 114, 3, 4, 112, 97, 103, 101, 14, 5, 105, 110, 112, 117, 116, 15, 6, 111, 117, 116, 112, 117, 116, 16, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 17, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 18, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 1, 115, 0, 8, 112, 97, 115, 115, 119, 111, 114, 100, 1, 115, 0, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 6, 115, 117, 98, 109, 105, 116, 0, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 19, 3, 1, 36, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 2, 3, 0, 0, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 3, 1, 34, 115, 101, 101, 100, 45, 107, 101, 101, 112, 101, 114, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 2, 1, 66, 31, 1, 114, 3, 4, 110, 97, 109, 101, 115, 7, 118, 101, 114, 115, 105, 111, 110, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 4, 0, 4, 112, 97, 103, 101, 3, 0, 0, 1, 114, 3, 3, 107, 101, 121, 115, 2, 111, 112, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 107, 111, 118, 3, 0, 2, 1, 112, 3, 1, 114, 2, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 4, 11, 109, 97, 120, 45, 101, 110, 116, 114, 105, 101, 115, 125, 4, 0, 6, 105, 115, 115, 117, 101, 114, 3, 0, 5, 1, 112, 125, 1, 112, 4, 1, 107, 8, 1, 114, 2, 4, 99, 114, 101, 100, 7, 5, 104, 105, 110, 116, 115, 9, 4, 0, 5, 111, 102, 102, 101, 114, 3, 0, 10, 1, 112, 7, 1, 112, 12, 1, 114, 3, 5, 112, 114, 111, 111, 102, 7, 8, 115, 101, 108, 101, 99, 116, 101, 100, 13, 9, 112, 114, 101, 105, 109, 97, 103, 101, 115, 8, 4, 0, 5, 112, 114, 111, 111, 102, 3, 0, 14, 1, 107, 1, 1, 107, 6, 1, 107, 115, 1, 114, 3, 4, 112, 97, 103, 101, 16, 5, 105, 115, 115, 117, 101, 17, 4, 108, 111, 97, 100, 18, 4, 0, 10, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 3, 0, 19, 1, 114, 2, 3, 107, 101, 121, 115, 5, 118, 97, 108, 117, 101, 115, 4, 0, 9, 105, 110, 112, 117, 116, 45, 99, 116, 120, 3, 0, 21, 1, 113, 4, 3, 107, 101, 121, 1, 121, 0, 2, 111, 112, 1, 121, 0, 5, 118, 97, 108, 117, 101, 1, 121, 0, 8, 115, 101, 108, 101, 99, 116, 101, 100, 1, 121, 0, 4, 0, 8, 107, 111, 118, 105, 110, 100, 101, 120, 3, 0, 23, 1, 114, 2, 3, 105, 100, 120, 121, 3, 118, 97, 108, 24, 4, 0, 5, 101, 110, 116, 114, 121, 3, 0, 25, 1, 114, 2, 3, 99, 116, 120, 26, 5, 118, 97, 108, 117, 101, 115, 4, 0, 5, 107, 118, 99, 116, 120, 3, 0, 27, 1, 113, 5, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 20, 0, 12, 97, 100, 100, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0, 0, 8, 110, 101, 119, 101, 110, 116, 114, 121, 0, 0, 13, 101, 100, 105, 116, 97, 116, 116, 114, 105, 98, 117, 116, 101, 1, 28, 0, 14, 101, 100, 105, 116, 109, 97, 120, 101, 110, 116, 114, 105, 101, 115, 1, 125, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 29, 3, 1, 33, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 99, 111, 110, 116, 101, 120, 116, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 3, 2, 3, 0, 2, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 9, 2, 3, 2, 1, 4, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 112, 115, 1, 107, 4, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 5, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 6, 3, 1, 29, 100, 101, 108, 97, 110, 111, 58, 119, 105, 116, 45, 117, 105, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 5, 2, 3, 0, 1, 7, 99, 111, 110, 116, 101, 120, 116, 2, 3, 0, 3, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 15, 2, 3, 2, 1, 6, 4, 0, 12, 115, 101, 101, 100, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 2, 3, 2, 1, 7, 4, 0, 14, 100, 101, 108, 97, 110, 111, 45, 99, 111, 110, 116, 101, 120, 116, 3, 0, 2, 1, 114, 2, 8, 115, 101, 108, 101, 99, 116, 111, 114, 115, 2, 116, 121, 115, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 4, 1, 114, 1, 5, 116, 105, 116, 108, 101, 115, 4, 0, 3, 97, 112, 112, 3, 0, 6, 1, 114, 3, 3, 97, 112, 112, 7, 7, 115, 101, 101, 100, 45, 117, 105, 1, 9, 100, 101, 108, 97, 110, 111, 45, 117, 105, 3, 4, 0, 7, 99, 111, 110, 116, 101, 110, 116, 3, 0, 8, 1, 112, 125, 1, 113, 1, 9, 101, 110, 99, 114, 121, 112, 116, 101, 100, 1, 10, 0, 4, 0, 7, 109, 101, 115, 115, 97, 103, 101, 3, 0, 11, 1, 113, 4, 11, 97, 108, 108, 45, 99, 111, 110, 116, 101, 110, 116, 1, 9, 0, 4, 115, 101, 101, 100, 1, 1, 0, 6, 100, 101, 108, 97, 110, 111, 1, 3, 0, 5, 101, 118, 101, 110, 116, 1, 12, 0, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 13, 3, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 8, 2, 3, 0, 4, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 6, 2, 3, 2, 1, 9, 4, 0, 14, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 64, 1, 7, 100, 101, 116, 97, 105, 108, 115, 1, 1, 0, 4, 0, 16, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 1, 2, 1, 64, 1, 4, 104, 97, 115, 104, 115, 1, 0, 4, 0, 8, 115, 101, 116, 45, 104, 97, 115, 104, 1, 3, 3, 1, 31, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 105, 110, 64, 48, 46, 49, 46, 48, 5, 10, 2, 3, 0, 4, 7, 99, 111, 110, 116, 101, 120, 116, 1, 66, 7, 2, 3, 2, 1, 11, 4, 0, 7, 99, 111, 110, 116, 101, 120, 116, 3, 0, 0, 1, 106, 1, 115, 1, 115, 1, 64, 1, 3, 99, 116, 120, 1, 0, 2, 4, 0, 6, 114, 101, 110, 100, 101, 114, 1, 3, 1, 64, 0, 1, 0, 4, 0, 8, 97, 99, 116, 105, 118, 97, 116, 101, 1, 4, 4, 1, 32, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 119, 117, 114, 98, 111, 45, 111, 117, 116, 64, 48, 46, 49, 46, 48, 5, 12, 1, 66, 4, 1, 112, 115, 1, 107, 0, 1, 64, 1, 9, 115, 101, 108, 101, 99, 116, 111, 114, 115, 1, 1, 0, 4, 0, 9, 97, 99, 116, 105, 118, 97, 116, 101, 115, 1, 2, 4, 1, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 64, 48, 46, 49, 46, 48, 5, 13, 4, 1, 32, 112, 101, 101, 114, 112, 105, 112, 101, 114, 58, 119, 97, 108, 108, 101, 116, 47, 112, 101, 101, 114, 112, 105, 112, 101, 114, 64, 48, 46, 49, 46, 48, 4, 0, 11, 15, 1, 0, 9, 112, 101, 101, 114, 112, 105, 112, 101, 114, 3, 8, 0, 0, 234, 6, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 119, 111, 114, 108, 100, 115, 34, 58, 123, 34, 112, 101, 101, 114, 112, 105, 112, 101, 114, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 110, 32, 101, 120, 97, 109, 112, 108, 101, 32, 119, 111, 114, 108, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 46, 34, 125, 125, 44, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 119, 117, 114, 98, 111, 45, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 108, 105, 115, 116, 101, 110, 45, 100, 101, 116, 97, 105, 108, 115, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 68, 101, 116, 97, 105, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 125, 44, 34, 97, 112, 112, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 109, 105, 110, 105, 106, 105, 110, 106, 97, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 34, 125, 44, 34, 99, 111, 110, 116, 101, 110, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 110, 116, 32, 114, 101, 99, 111, 114, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 99, 111, 110, 116, 101, 110, 116, 32, 111, 102, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 97, 112, 112, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 97, 112, 112, 34, 58, 34, 112, 97, 115, 115, 32, 105, 110, 32, 112, 114, 111, 112, 115, 32, 108, 105, 107, 101, 32, 116, 105, 116, 108, 101, 44, 32, 101, 116, 99, 46, 34, 44, 34, 115, 101, 101, 100, 45, 117, 105, 34, 58, 34, 111, 112, 116, 105, 111, 110, 97, 108, 108, 121, 32, 112, 97, 115, 115, 32, 105, 110, 32, 97, 110, 32, 101, 110, 99, 114, 121, 112, 116, 101, 100, 32, 115, 101, 101, 100, 32, 116, 111, 32, 108, 111, 97, 100, 34, 125, 125, 44, 34, 99, 111, 110, 116, 101, 120, 116, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 67, 111, 110, 116, 101, 120, 116, 32, 118, 97, 114, 105, 97, 110, 116, 115, 34, 44, 34, 105, 116, 101, 109, 115, 34, 58, 123, 34, 101, 118, 101, 110, 116, 34, 58, 34, 101, 100, 119, 97, 114, 100, 115, 40, 101, 100, 119, 97, 114, 100, 115, 45, 99, 111, 110, 116, 101, 120, 116, 41, 34, 125, 125, 125, 125, 44, 34, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 99, 116, 105, 118, 97, 116, 101, 115, 34, 58, 34, 99, 97, 108, 108, 115, 32, 97, 99, 116, 105, 118, 97, 116, 101, 32, 111, 110, 32, 111, 110, 32, 116, 104, 101, 32, 99, 104, 105, 108, 100, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 105, 110, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 97, 100, 100, 101, 118, 101, 110, 116, 108, 105, 115, 116, 101, 110, 101, 114, 34, 58, 34, 65, 100, 100, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 108, 105, 115, 116, 101, 110, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 101, 108, 101, 109, 101, 110, 116, 34, 44, 34, 115, 101, 116, 45, 104, 97, 115, 104, 34, 58, 34, 115, 101, 116, 32, 116, 104, 101, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 104, 97, 115, 104, 34, 125, 125, 44, 34, 119, 117, 114, 98, 111, 45, 111, 117, 116, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 114, 101, 110, 100, 101, 114, 34, 58, 34, 114, 101, 110, 100, 101, 114, 115, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 87, 101, 98, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 103, 105, 118, 101, 110, 32, 100, 97, 116, 97, 34, 44, 34, 97, 99, 116, 105, 118, 97, 116, 101, 34, 58, 34, 97, 99, 116, 105, 118, 97, 116, 101, 32, 108, 105, 115, 116, 101, 110, 105, 110, 103, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
      
      #[inline(never)]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      pub fn __link_section() {}
      