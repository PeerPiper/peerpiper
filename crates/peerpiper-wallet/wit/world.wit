package peerpiper:wallet@0.1.0;

// use example:edwards-ui/wurbo-out@0.1.0 as edwards-out;
use seed-keeper:wit-ui/wurbo-out@0.1.0 as seed-out;
use delano:wit-ui/wurbo-out@0.1.0 as delano-out;

interface context-types {

  // use edwards-out.{context as edwards-context};
  use seed-out.{context as seed-context};
  use delano-out.{context as delano-context};

  // Details required in order to add an event listener to an element
  record listen-details {
    selector: string,
    ty: string,
  }

  // Context for the minijinja rendering
  record app {
    title: string
  }

  // Content record for the initial content of the entire app
  record content {
    // pass in props like title, etc.
    app: app,
    // optionally pass in an encrypted seed to load
    seed-ui: seed-context,
    delano-ui: delano-context,
    // optionally pass in a message to sign or verify
    // edwards-ui: edwards-context
  }

  record seed {
    // base64 standard padded string
    seed: string
  }

  variant message {
    encrypted(seed)
  }

  // Context variants
  variant context {
    all-content(content),
    seed(seed-context),
    delano(delano-context),
    // edwards(edwards-context)
    event(message),
    // messages that are base64 encoded
    message(string)
  }

}
interface aggregation {
  // calls activate on on the child components
  activates: func(selectors: option<list<string>>);
}

interface wurbo-in {

  use context-types.{listen-details};

  // Add an event listener to the given element
  addeventlistener: func(details: listen-details);

  // Emit events from this component. Messages should be serialized JSON strings of Event type.
  emit: func(message: string);

  // set the location hash
  set-hash: func(hash: string);
}

interface wurbo-out {

  use context-types.{context};

  // renders the initial Web component with the given data
  render: func(ctx: context) -> result<string, string>;

  // activate listening 
  activate: func(selectors: option<list<string>>);
}

/// An example world for the component to target.
world peerpiper {
    // requests to the DOM via jco
    import wurbo-in;

    import seed-keeper:wit-ui/wurbo-out@0.1.0;
  
    // requests from the DOM via jco
    export wurbo-out;

    export aggregation;
}
