// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod peerpiper {
    #[allow(dead_code)]
    pub mod handler {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Public Request type
            #[derive(Clone)]
            pub struct Request {
                /// The request message
                pub request: _rt::Vec<u8>,
                /// Requesting peer
                pub peer: _rt::String,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("request", &self.request)
                        .field("peer", &self.peer)
                        .finish()
                }
            }
            /// Messages are peer, topic, and data (list<u8>)
            #[derive(Clone)]
            pub struct Message {
                /// The message topic
                pub topic: _rt::String,
                /// The message data
                pub data: _rt::Vec<u8>,
                /// The peer that sent the message
                pub peer: _rt::String,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("topic", &self.topic)
                        .field("data", &self.data)
                        .field("peer", &self.peer)
                        .finish()
                }
            }
            /// Public Event type
            #[derive(Clone)]
            pub enum Event {
                /// A simple event with a message.
                Message(Message),
                /// A Request
                Request(Request),
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Event::Message(e) => f.debug_tuple("Event::Message").field(e).finish(),
                        Event::Request(e) => f.debug_tuple("Event::Request").field(e).finish(),
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod peerpiper {
        #[allow(dead_code)]
        pub mod handler {
            #[allow(dead_code, clippy::all)]
            pub mod handler {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Event = super::super::super::super::peerpiper::handler::types::Event;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    use super::super::super::super::peerpiper::handler::types::Event as V5;
                    let v5 = match arg0 {
                        0 => {
                            let e5 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                                let len1 = arg4;
                                let len2 = arg6;
                                let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);

                                super::super::super::super::peerpiper::handler::types::Message {
                                    topic: _rt::string_lift(bytes0),
                                    data: _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                                    peer: _rt::string_lift(bytes2),
                                }
                            };
                            V5::Message(e5)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e5 = {
                                let len3 = arg2;
                                let len4 = arg4;
                                let bytes4 = _rt::Vec::from_raw_parts(arg3.cast(), len4, len4);

                                super::super::super::super::peerpiper::handler::types::Request {
                                    request: _rt::Vec::from_raw_parts(arg1.cast(), len3, len3),
                                    peer: _rt::string_lift(bytes4),
                                }
                            };
                            V5::Request(e5)
                        }
                    };
                    let result6 = T::handle(v5);
                    let ptr7 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec8 = (result6.into_bytes()).into_boxed_slice();
                    let ptr8 = vec8.as_ptr().cast::<u8>();
                    let len8 = vec8.len();
                    ::core::mem::forget(vec8);
                    *ptr7.add(4).cast::<usize>() = len8;
                    *ptr7.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    /// Handle an event
                    fn handle(evt: Event) -> _rt::String;
                }
                #[doc(hidden)]

                macro_rules! __export_peerpiper_handler_handler_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "peerpiper:handler/handler@0.1.0#handle"]
          unsafe extern "C" fn export_handle(arg0: i32,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,arg5: *mut u8,arg6: usize,) -> *mut u8 {
            $($path_to_types)*::_export_handle_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
          }
          #[export_name = "cabi_post_peerpiper:handler/handler@0.1.0#handle"]
          unsafe extern "C" fn _post_return_handle(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_handle::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_peerpiper_handler_handler_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_handlers_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::peerpiper::handler::handler::__export_peerpiper_handler_handler_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::peerpiper::handler::handler);
  )
}
#[doc(inline)]
pub(crate) use __export_handlers_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:handlers:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 458] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xcb\x02\x01A\x02\x01\
A\x07\x01B\x07\x01p}\x01r\x02\x07request\0\x04peers\x04\0\x07request\x03\0\x01\x01\
r\x03\x05topics\x04data\0\x04peers\x04\0\x07message\x03\0\x03\x01q\x02\x07messag\
e\x01\x04\0\x07request\x01\x02\0\x04\0\x05event\x03\0\x05\x03\x01\x1dpeerpiper:h\
andler/types@0.1.0\x05\0\x02\x03\0\0\x07request\x02\x03\0\0\x07message\x02\x03\0\
\0\x05event\x01B\x08\x02\x03\x02\x01\x01\x04\0\x07request\x03\0\0\x02\x03\x02\x01\
\x02\x04\0\x07message\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x05event\x03\0\x04\x01\
@\x01\x03evt\x05\0s\x04\0\x06handle\x01\x06\x04\x01\x1fpeerpiper:handler/handler\
@0.1.0\x05\x04\x04\x01\x20peerpiper:handler/handlers@0.1.0\x04\0\x0b\x0e\x01\0\x08\
handlers\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.2\
08.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
